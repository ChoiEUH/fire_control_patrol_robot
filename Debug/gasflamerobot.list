
gasflamerobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008974  08008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a50  08008a50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a58  08008a58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000051b8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000522c  2000522c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018837  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003123  00000000  00000000  000388db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001400  00000000  00000000  0003cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000334b  00000000  00000000  0003e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001686a  00000000  00000000  00041663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f00ad  00000000  00000000  00057ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147f7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e88  00000000  00000000  00147fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800895c 	.word	0x0800895c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800895c 	.word	0x0800895c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
void drivingTask_init(void *argument);
void sensorTask_init(void *argument);


int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  HAL_Init();
 8000d74:	f001 fa48 	bl	8002208 <HAL_Init>

  SystemClock_Config();
 8000d78:	f000 f834 	bl	8000de4 <SystemClock_Config>


  MX_GPIO_Init();
 8000d7c:	f000 fb2a 	bl	80013d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d80:	f000 fad4 	bl	800132c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000d84:	f000 f898 	bl	8000eb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d88:	f000 f8e8 	bl	8000f5c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d8c:	f000 f938 	bl	8001000 <MX_ADC3_Init>
  MX_TIM4_Init();
 8000d90:	f000 fa52 	bl	8001238 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000d94:	f000 f986 	bl	80010a4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000d98:	f000 faf2 	bl	8001380 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000d9c:	f000 f9dc 	bl	8001158 <MX_TIM3_Init>

  osKernelInitialize();
 8000da0:	f004 fbec 	bl	800557c <osKernelInitialize>


  drivingTaskHandle = osThreadNew(drivingTask_init, NULL, &drivingTask_attributes);
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <main+0x5c>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <main+0x60>)
 8000daa:	f004 fc31 	bl	8005610 <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <main+0x64>)
 8000db2:	6013      	str	r3, [r2, #0]

  sensorTaskHandle = osThreadNew(sensorTask_init, NULL, &sensorTask_attributes);
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <main+0x68>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <main+0x6c>)
 8000dba:	f004 fc29 	bl	8005610 <osThreadNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <main+0x70>)
 8000dc2:	6013      	str	r3, [r2, #0]


  osKernelStart();
 8000dc4:	f004 fbfe 	bl	80055c4 <osKernelStart>

  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <main+0x58>
 8000dca:	bf00      	nop
 8000dcc:	080089bc 	.word	0x080089bc
 8000dd0:	08001989 	.word	0x08001989
 8000dd4:	200008bc 	.word	0x200008bc
 8000dd8:	080089e0 	.word	0x080089e0
 8000ddc:	08001b59 	.word	0x08001b59
 8000de0:	200008c0 	.word	0x200008c0

08000de4 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2230      	movs	r2, #48	; 0x30
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f007 f94a 	bl	800808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]


  __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <SystemClock_Config+0xcc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <SystemClock_Config+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e40:	2301      	movs	r3, #1
 8000e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e58:	23a8      	movs	r3, #168	; 0xa8
 8000e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e60:	2307      	movs	r3, #7
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 ffad 	bl	8002dc8 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e74:	f000 fecc 	bl	8001c10 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2105      	movs	r1, #5
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fa0e 	bl	80032b8 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ea2:	f000 feb5 	bl	8001c10 <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x9c>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_ADC1_Init+0xa0>)
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f1a:	f001 fa0b 	bl	8002334 <HAL_ADC_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f24:	f000 fe74 	bl	8001c10 <Error_Handler>
  }


  sConfig.Channel = ADC_CHANNEL_3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f3a:	f001 fa3f 	bl	80023bc <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f44:	f000 fe64 	bl	8001c10 <Error_Handler>
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000684 	.word	0x20000684
 8000f54:	40012000 	.word	0x40012000
 8000f58:	0f000001 	.word	0x0f000001

08000f5c <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  hadc2.Instance = ADC2;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_ADC2_Init+0x9c>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_ADC2_Init+0xa0>)
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000fbe:	f001 f9b9 	bl	8002334 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 fe22 	bl	8001c10 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_10;
 8000fcc:	230a      	movs	r3, #10
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_ADC2_Init+0x98>)
 8000fde:	f001 f9ed 	bl	80023bc <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 fe12 	bl	8001c10 <Error_Handler>
  }

}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200006cc 	.word	0x200006cc
 8000ff8:	40012100 	.word	0x40012100
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <MX_ADC3_Init>:

static void MX_ADC3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  hadc3.Instance = ADC3;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_ADC3_Init+0x98>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <MX_ADC3_Init+0x9c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ADC3_Init+0x98>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC3_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ADC3_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ADC3_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC3_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC3_Init+0x98>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <MX_ADC3_Init+0xa0>)
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC3_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC3_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_ADC3_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC3_Init+0x98>)
 800105c:	2201      	movs	r2, #1
 800105e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC3_Init+0x98>)
 8001062:	f001 f967 	bl	8002334 <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800106c:	f000 fdd0 	bl	8001c10 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_13;
 8001070:	230d      	movs	r3, #13
 8001072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC3_Init+0x98>)
 8001082:	f001 f99b 	bl	80023bc <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800108c:	f000 fdc0 	bl	8001c10 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000714 	.word	0x20000714
 800109c:	40012200 	.word	0x40012200
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010d0:	f240 628f 	movw	r2, #1679	; 0x68f
 80010d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM2_Init+0xb0>)
 80010f2:	f002 fb50 	bl	8003796 <HAL_TIM_PWM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010fc:	f000 fd88 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_TIM2_Init+0xb0>)
 8001110:	f003 fdae 	bl	8004c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800111a:	f000 fd79 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	220c      	movs	r2, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM2_Init+0xb0>)
 8001136:	f002 ff6b 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001140:	f000 fd66 	bl	8001c10 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM2_Init+0xb0>)
 8001146:	f000 fec1 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000075c 	.word	0x2000075c

08001158 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM3_Init+0xd8>)
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <MX_TIM3_Init+0xdc>)
 8001186:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM3_Init+0xd8>)
 800118a:	2253      	movs	r2, #83	; 0x53
 800118c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM3_Init+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM3_Init+0xd8>)
 8001196:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800119a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_TIM3_Init+0xd8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_TIM3_Init+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM3_Init+0xd8>)
 80011aa:	f002 faa5 	bl	80036f8 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011b4:	f000 fd2c 	bl	8001c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	4619      	mov	r1, r3
 80011c4:	481a      	ldr	r0, [pc, #104]	; (8001230 <MX_TIM3_Init+0xd8>)
 80011c6:	f002 ffe5 	bl	8004194 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fd1e 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011d4:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_TIM3_Init+0xd8>)
 80011d6:	f002 fbf5 	bl	80039c4 <HAL_TIM_IC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 fd16 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <MX_TIM3_Init+0xd8>)
 80011f4:	f003 fd3c 	bl	8004c70 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011fe:	f000 fd07 	bl	8001c10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001206:	2301      	movs	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM3_Init+0xd8>)
 800121a:	f002 fe5d 	bl	8003ed8 <HAL_TIM_IC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001224:	f000 fcf4 	bl	8001c10 <Error_Handler>
  }

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200007a4 	.word	0x200007a4
 8001234:	40000400 	.word	0x40000400

08001238 <MX_TIM4_Init>:


static void MX_TIM4_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <MX_TIM4_Init+0xec>)
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <MX_TIM4_Init+0xf0>)
 800125e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_TIM4_Init+0xec>)
 8001262:	2253      	movs	r2, #83	; 0x53
 8001264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <MX_TIM4_Init+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_TIM4_Init+0xec>)
 800126e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_TIM4_Init+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_TIM4_Init+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <MX_TIM4_Init+0xec>)
 8001282:	f002 fa88 	bl	8003796 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800128c:	f000 fcc0 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4619      	mov	r1, r3
 800129e:	4821      	ldr	r0, [pc, #132]	; (8001324 <MX_TIM4_Init+0xec>)
 80012a0:	f003 fce6 	bl	8004c70 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012aa:	f000 fcb1 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4817      	ldr	r0, [pc, #92]	; (8001324 <MX_TIM4_Init+0xec>)
 80012c6:	f002 fea3 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012d0:	f000 fc9e 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2204      	movs	r2, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_TIM4_Init+0xec>)
 80012dc:	f002 fe98 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012e6:	f000 fc93 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_TIM4_Init+0xec>)
 80012f2:	f002 fe8d 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80012fc:	f000 fc88 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	220c      	movs	r2, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM4_Init+0xec>)
 8001308:	f002 fe82 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001312:	f000 fc7d 	bl	8001c10 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM4_Init+0xec>)
 8001318:	f000 fdd8 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200007ec 	.word	0x200007ec
 8001328:	40000800 	.word	0x40000800

0800132c <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART3_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001364:	f003 fd14 	bl	8004d90 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f000 fc4f 	bl	8001c10 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000834 	.word	0x20000834
 800137c:	40004800 	.word	0x40004800

08001380 <MX_USART6_UART_Init>:

static void MX_USART6_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART6_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 800138c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001390:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART6_UART_Init+0x4c>)
 80013b8:	f003 fcea 	bl	8004d90 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 fc25 	bl	8001c10 <Error_Handler>
  }

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000878 	.word	0x20000878
 80013d0:	40011400 	.word	0x40011400

080013d4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <MX_GPIO_Init+0x1b0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a64      	ldr	r2, [pc, #400]	; (8001584 <MX_GPIO_Init+0x1b0>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b62      	ldr	r3, [pc, #392]	; (8001584 <MX_GPIO_Init+0x1b0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <MX_GPIO_Init+0x1b0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a5d      	ldr	r2, [pc, #372]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b57      	ldr	r3, [pc, #348]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a56      	ldr	r2, [pc, #344]	; (8001584 <MX_GPIO_Init+0x1b0>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b54      	ldr	r3, [pc, #336]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b50      	ldr	r3, [pc, #320]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a48      	ldr	r2, [pc, #288]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_GPIO_Init+0x1b0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <MX_GPIO_Init+0x1b0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a41      	ldr	r2, [pc, #260]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_GPIO_Init+0x1b0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a3a      	ldr	r2, [pc, #232]	; (8001584 <MX_GPIO_Init+0x1b0>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <MX_GPIO_Init+0x1b0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2120      	movs	r1, #32
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <MX_GPIO_Init+0x1b4>)
 80014b4:	f001 fc6e 	bl	8002d94 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014be:	4833      	ldr	r0, [pc, #204]	; (800158c <MX_GPIO_Init+0x1b8>)
 80014c0:	f001 fc68 	bl	8002d94 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80014ca:	4831      	ldr	r0, [pc, #196]	; (8001590 <MX_GPIO_Init+0x1bc>)
 80014cc:	f001 fc62 	bl	8002d94 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d6:	482f      	ldr	r0, [pc, #188]	; (8001594 <MX_GPIO_Init+0x1c0>)
 80014d8:	f001 fc5c 	bl	8002d94 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e2:	482d      	ldr	r0, [pc, #180]	; (8001598 <MX_GPIO_Init+0x1c4>)
 80014e4:	f001 fc56 	bl	8002d94 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e8:	2320      	movs	r3, #32
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_GPIO_Init+0x1b4>)
 8001500:	f001 fa9c 	bl	8002a3c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001504:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <MX_GPIO_Init+0x1b8>)
 800151e:	f001 fa8d 	bl	8002a3c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001522:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <MX_GPIO_Init+0x1bc>)
 800153c:	f001 fa7e 	bl	8002a3c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <MX_GPIO_Init+0x1c0>)
 800155a:	f001 fa6f 	bl	8002a3c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800155e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <MX_GPIO_Init+0x1c4>)
 8001578:	f001 fa60 	bl	8002a3c <HAL_GPIO_Init>


}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	; 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021000 	.word	0x40021000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020c00 	.word	0x40020c00

0800159c <straight>:

/* USER CODE BEGIN 4 */
void straight(){
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	 GPIOF->ODR |= 0x1000;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <straight+0x70>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <straight+0x70>)
 80015a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015aa:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x2000);
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <straight+0x70>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a16      	ldr	r2, [pc, #88]	; (800160c <straight+0x70>)
 80015b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015b6:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x4000);
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <straight+0x70>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	4a13      	ldr	r2, [pc, #76]	; (800160c <straight+0x70>)
 80015be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c2:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR |= 0x8000;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <straight+0x70>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <straight+0x70>)
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ce:	6153      	str	r3, [r2, #20]

	 GPIOE->ODR |= 0x1000;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <straight+0x74>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <straight+0x74>)
 80015d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015da:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x4000);
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <straight+0x74>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <straight+0x74>)
 80015e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e6:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x8000);
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <straight+0x74>)
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <straight+0x74>)
 80015ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015f2:	6153      	str	r3, [r2, #20]
	 GPIOB->ODR |= 0x0400;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <straight+0x78>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <straight+0x78>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6153      	str	r3, [r2, #20]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021400 	.word	0x40021400
 8001610:	40021000 	.word	0x40021000
 8001614:	40020400 	.word	0x40020400

08001618 <Lrotate>:

void Lrotate(){
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	 GPIOF->ODR |= 0x2000;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <Lrotate+0x70>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <Lrotate+0x70>)
 8001622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001626:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x1000);
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <Lrotate+0x70>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	4a16      	ldr	r2, [pc, #88]	; (8001688 <Lrotate+0x70>)
 800162e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001632:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x4000);
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <Lrotate+0x70>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <Lrotate+0x70>)
 800163a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163e:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR |= 0x8000;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <Lrotate+0x70>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <Lrotate+0x70>)
 8001646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164a:	6153      	str	r3, [r2, #20]

	 GPIOE->ODR |= 0x4000;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <Lrotate+0x74>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <Lrotate+0x74>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x1000);
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <Lrotate+0x74>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <Lrotate+0x74>)
 800165e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001662:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x8000);
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <Lrotate+0x74>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4a08      	ldr	r2, [pc, #32]	; (800168c <Lrotate+0x74>)
 800166a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800166e:	6153      	str	r3, [r2, #20]
	 GPIOB->ODR |= 0x0400;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <Lrotate+0x78>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <Lrotate+0x78>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6153      	str	r3, [r2, #20]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021400 	.word	0x40021400
 800168c:	40021000 	.word	0x40021000
 8001690:	40020400 	.word	0x40020400

08001694 <Rrotate>:

void Rrotate(){
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	GPIOF->ODR &= ~(0x2000);
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <Rrotate+0x70>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <Rrotate+0x70>)
 800169e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016a2:	6153      	str	r3, [r2, #20]
	GPIOF->ODR |= 0x1000;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <Rrotate+0x70>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <Rrotate+0x70>)
 80016aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ae:	6153      	str	r3, [r2, #20]
	GPIOF->ODR |= 0x4000;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <Rrotate+0x70>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <Rrotate+0x70>)
 80016b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ba:	6153      	str	r3, [r2, #20]
	GPIOF->ODR &= ~(0x8000);
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <Rrotate+0x70>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <Rrotate+0x70>)
 80016c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016c6:	6153      	str	r3, [r2, #20]

	 GPIOE->ODR &= ~(0x4000);
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <Rrotate+0x74>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <Rrotate+0x74>)
 80016ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d2:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR |= 0x1000;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <Rrotate+0x74>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <Rrotate+0x74>)
 80016da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016de:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR |= 0x8000;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <Rrotate+0x74>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <Rrotate+0x74>)
 80016e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ea:	6153      	str	r3, [r2, #20]
	 GPIOB->ODR &= ~(0x0400);
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <Rrotate+0x78>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <Rrotate+0x78>)
 80016f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016f6:	6153      	str	r3, [r2, #20]

}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021400 	.word	0x40021400
 8001708:	40021000 	.word	0x40021000
 800170c:	40020400 	.word	0x40020400

08001710 <Pause>:

void Pause(){
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	 GPIOF->ODR &= ~(0x1000);
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <Pause+0x70>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <Pause+0x70>)
 800171a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800171e:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x2000);
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <Pause+0x70>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	4a16      	ldr	r2, [pc, #88]	; (8001780 <Pause+0x70>)
 8001726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800172a:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x4000);
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <Pause+0x70>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <Pause+0x70>)
 8001732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001736:	6153      	str	r3, [r2, #20]
	 GPIOF->ODR &= ~(0x8000);
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <Pause+0x70>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	4a10      	ldr	r2, [pc, #64]	; (8001780 <Pause+0x70>)
 800173e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001742:	6153      	str	r3, [r2, #20]

	 GPIOE->ODR &= ~(0x1000);
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <Pause+0x74>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <Pause+0x74>)
 800174a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800174e:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x4000);
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <Pause+0x74>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <Pause+0x74>)
 8001756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175a:	6153      	str	r3, [r2, #20]
	 GPIOE->ODR &= ~(0x8000);
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <Pause+0x74>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <Pause+0x74>)
 8001762:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001766:	6153      	str	r3, [r2, #20]
	 GPIOB->ODR &= ~(0x0400);
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <Pause+0x78>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <Pause+0x78>)
 800176e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001772:	6153      	str	r3, [r2, #20]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021400 	.word	0x40021400
 8001784:	40021000 	.word	0x40021000
 8001788:	40020400 	.word	0x40020400

0800178c <back>:

void back(){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	     GPIOF->ODR &= ~(0x1000);
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <back+0x70>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <back+0x70>)
 8001796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800179a:	6153      	str	r3, [r2, #20]
		 GPIOF->ODR |= 0x2000;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <back+0x70>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <back+0x70>)
 80017a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a6:	6153      	str	r3, [r2, #20]
		 GPIOF->ODR |= 0x4000;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <back+0x70>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <back+0x70>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b2:	6153      	str	r3, [r2, #20]
		 GPIOF->ODR &= ~(0x8000);
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <back+0x70>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	4a10      	ldr	r2, [pc, #64]	; (80017fc <back+0x70>)
 80017ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017be:	6153      	str	r3, [r2, #20]

		 GPIOE->ODR &= ~(0x1000);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <back+0x74>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <back+0x74>)
 80017c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017ca:	6153      	str	r3, [r2, #20]
		 GPIOE->ODR |= 0x4000;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <back+0x74>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <back+0x74>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6153      	str	r3, [r2, #20]
		 GPIOE->ODR |= 0x8000;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <back+0x74>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <back+0x74>)
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	6153      	str	r3, [r2, #20]
		 GPIOB->ODR &= ~(0x0400);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <back+0x78>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <back+0x78>)
 80017ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ee:	6153      	str	r3, [r2, #20]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021000 	.word	0x40021000
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7f1b      	ldrb	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	f040 8083 	bne.w	8001920 <HAL_TIM_IC_CaptureCallback+0x118>
//만약 인터럽트 소스 채널2가 활성화 되면//
	{
		if (Is_First_Captured==0) //포착된 초음파 변수가 0이라면//
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x128>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d11a      	bne.n	8001858 <HAL_TIM_IC_CaptureCallback+0x50>
		{
		 IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f002 fd7d 	bl	8004324 <HAL_TIM_ReadCapturedValue>
 800182a:	4603      	mov	r3, r0
 800182c:	4a41      	ldr	r2, [pc, #260]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800182e:	6013      	str	r3, [r2, #0]
// 초음파 읽기 시작 //
		 Is_First_Captured = 1;
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
// 포착된 초음파 변수 설정 //

		 __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a1a      	ldr	r2, [r3, #32]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020a 	bic.w	r2, r2, #10
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0202 	orr.w	r2, r2, #2
 8001854:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}

	}

	}
 8001856:	e063      	b.n	8001920 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x128>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d15f      	bne.n	8001920 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f002 fd5e 	bl	8004324 <HAL_TIM_ReadCapturedValue>
 8001868:	4603      	mov	r3, r0
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x130>)
 800186c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d907      	bls.n	8001892 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a2b      	ldr	r2, [pc, #172]	; (800193c <HAL_TIM_IC_CaptureCallback+0x134>)
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e00f      	b.n	80018b2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d909      	bls.n	80018b2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x130>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018ac:	33ff      	adds	r3, #255	; 0xff
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_TIM_IC_CaptureCallback+0x134>)
 80018b0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_TIM_IC_CaptureCallback+0x134>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe2c 	bl	8000514 <__aeabi_ui2d>
 80018bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001928 <HAL_TIM_IC_CaptureCallback+0x120>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fea1 	bl	8000608 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d6:	f7fe ffc1 	bl	800085c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8a3 	bl	8000a2c <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018ec:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020a 	bic.w	r2, r2, #10
 8001902:	621a      	str	r2, [r3, #32]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a12      	ldr	r2, [r2, #32]
 800190e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0202 	bic.w	r2, r2, #2
 800191e:	60da      	str	r2, [r3, #12]
	}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	b020c49c 	.word	0xb020c49c
 800192c:	3fa16872 	.word	0x3fa16872
 8001930:	200000a4 	.word	0x200000a4
 8001934:	20000098 	.word	0x20000098
 8001938:	2000009c 	.word	0x2000009c
 800193c:	200000a0 	.word	0x200000a0
 8001940:	200000a5 	.word	0x200000a5
 8001944:	200007a4 	.word	0x200007a4

08001948 <HCSR04_Read>:


void HCSR04_Read (void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2120      	movs	r1, #32
 8001950:	480a      	ldr	r0, [pc, #40]	; (800197c <HCSR04_Read+0x34>)
 8001952:	f001 fa1f 	bl	8002d94 <HAL_GPIO_WritePin>
	HAL_Delay(0.01);
 8001956:	2000      	movs	r0, #0
 8001958:	f000 fcc8 	bl	80022ec <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2120      	movs	r1, #32
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <HCSR04_Read+0x34>)
 8001962:	f001 fa17 	bl	8002d94 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HCSR04_Read+0x38>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HCSR04_Read+0x38>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0202 	orr.w	r2, r2, #2
 8001974:	60da      	str	r2, [r3, #12]
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020000 	.word	0x40020000
 8001980:	200007a4 	.word	0x200007a4
 8001984:	00000000 	.word	0x00000000

08001988 <drivingTask_init>:

void drivingTask_init(void *argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001990:	2100      	movs	r1, #0
 8001992:	4863      	ldr	r0, [pc, #396]	; (8001b20 <drivingTask_init+0x198>)
 8001994:	f002 f870 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001998:	210c      	movs	r1, #12
 800199a:	4862      	ldr	r0, [pc, #392]	; (8001b24 <drivingTask_init+0x19c>)
 800199c:	f001 ff4a 	bl	8003834 <HAL_TIM_PWM_Start>
  for(;;)
  {
	  ADC3->CR2 |= 0x40000001;
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <drivingTask_init+0x1a0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <drivingTask_init+0x1a0>)
 80019a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6093      	str	r3, [r2, #8]
	  value2 = ADC3->DR;
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <drivingTask_init+0x1a0>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <drivingTask_init+0x1a4>)
 80019b8:	801a      	strh	r2, [r3, #0]

	  distance = (3420-value2)/22.6;
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <drivingTask_init+0x1a4>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	f5c3 6355 	rsb	r3, r3, #3408	; 0xd50
 80019c2:	330c      	adds	r3, #12
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdb5 	bl	8000534 <__aeabi_i2d>
 80019ca:	a353      	add	r3, pc, #332	; (adr r3, 8001b18 <drivingTask_init+0x190>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe ff44 	bl	800085c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f826 	bl	8000a2c <__aeabi_d2uiz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <drivingTask_init+0x1a8>)
 80019e6:	801a      	strh	r2, [r3, #0]


      TIM4->CCER |= 0x1111;
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <drivingTask_init+0x1ac>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <drivingTask_init+0x1ac>)
 80019ee:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80019f2:	f043 0311 	orr.w	r3, r3, #17
 80019f6:	6213      	str	r3, [r2, #32]

TIM4->CR1 |= 0x0001;
 80019f8:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <drivingTask_init+0x1ac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <drivingTask_init+0x1ac>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]



TIM4->CCR4 = 8000;
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <drivingTask_init+0x1ac>)
 8001a06:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
TIM4->CCR3 = 8000;
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <drivingTask_init+0x1ac>)
 8001a0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
TIM4->CCR2 = 8000;
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <drivingTask_init+0x1ac>)
 8001a16:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
TIM4->CCR1 = 8000;
 8001a1c:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <drivingTask_init+0x1ac>)
 8001a1e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34

HCSR04_Read();
 8001a24:	f7ff ff90 	bl	8001948 <HCSR04_Read>

sprintf(buf,"1:%d\r\n",Distance);
 8001a28:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <drivingTask_init+0x1b0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4943      	ldr	r1, [pc, #268]	; (8001b3c <drivingTask_init+0x1b4>)
 8001a30:	4843      	ldr	r0, [pc, #268]	; (8001b40 <drivingTask_init+0x1b8>)
 8001a32:	f006 fb33 	bl	800809c <siprintf>
sprintf(buf4,"2:%d\r\n",distance);
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <drivingTask_init+0x1a8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4941      	ldr	r1, [pc, #260]	; (8001b44 <drivingTask_init+0x1bc>)
 8001a3e:	4842      	ldr	r0, [pc, #264]	; (8001b48 <drivingTask_init+0x1c0>)
 8001a40:	f006 fb2c 	bl	800809c <siprintf>
HAL_UART_Transmit(&huart3,buf,sizeof(buf),0xFFFF);
 8001a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a4c:	493c      	ldr	r1, [pc, #240]	; (8001b40 <drivingTask_init+0x1b8>)
 8001a4e:	483f      	ldr	r0, [pc, #252]	; (8001b4c <drivingTask_init+0x1c4>)
 8001a50:	f003 f9eb 	bl	8004e2a <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,buf4,sizeof(buf4),0xFFFF);
 8001a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a5c:	493a      	ldr	r1, [pc, #232]	; (8001b48 <drivingTask_init+0x1c0>)
 8001a5e:	483b      	ldr	r0, [pc, #236]	; (8001b4c <drivingTask_init+0x1c4>)
 8001a60:	f003 f9e3 	bl	8004e2a <HAL_UART_Transmit>
if(value1 > 0){
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <drivingTask_init+0x1c8>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d099      	beq.n	80019a0 <drivingTask_init+0x18>
if(Distance <= 40){
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <drivingTask_init+0x1b0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b28      	cmp	r3, #40	; 0x28
 8001a72:	d812      	bhi.n	8001a9a <drivingTask_init+0x112>
	Pause();
 8001a74:	f7ff fe4c 	bl	8001710 <Pause>
	osDelay(1000);
 8001a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a7c:	f003 fe5a 	bl	8005734 <osDelay>
	back();
 8001a80:	f7ff fe84 	bl	800178c <back>
	osDelay(1000);
 8001a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a88:	f003 fe54 	bl	8005734 <osDelay>
	Lrotate();
 8001a8c:	f7ff fdc4 	bl	8001618 <Lrotate>
	osDelay(1500);
 8001a90:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001a94:	f003 fe4e 	bl	8005734 <osDelay>
 8001a98:	e782      	b.n	80019a0 <drivingTask_init+0x18>

}

else if(distance < 40){
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <drivingTask_init+0x1a8>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b27      	cmp	r3, #39	; 0x27
 8001aa0:	d812      	bhi.n	8001ac8 <drivingTask_init+0x140>

	Pause();
 8001aa2:	f7ff fe35 	bl	8001710 <Pause>
	osDelay(1000);
 8001aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aaa:	f003 fe43 	bl	8005734 <osDelay>
	back();
 8001aae:	f7ff fe6d 	bl	800178c <back>
	osDelay(1000);
 8001ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab6:	f003 fe3d 	bl	8005734 <osDelay>
	Rrotate();
 8001aba:	f7ff fdeb 	bl	8001694 <Rrotate>
	osDelay(1500);
 8001abe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ac2:	f003 fe37 	bl	8005734 <osDelay>
 8001ac6:	e76b      	b.n	80019a0 <drivingTask_init+0x18>
}
else if(value1 <2000){
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <drivingTask_init+0x1c8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ad0:	d21a      	bcs.n	8001b08 <drivingTask_init+0x180>

	Pause();
 8001ad2:	f7ff fe1d 	bl	8001710 <Pause>
	TIM2->CCR4 = 120;
 8001ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ada:	2278      	movs	r2, #120	; 0x78
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8001ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae2:	f003 fe27 	bl	8005734 <osDelay>
	TIM2->CCR4 = 75;
 8001ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aea:	224b      	movs	r2, #75	; 0x4b
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5000);
 8001aee:	f241 3088 	movw	r0, #5000	; 0x1388
 8001af2:	f003 fe1f 	bl	8005734 <osDelay>
	TIM2->CCR4 = 30;
 8001af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afa:	221e      	movs	r2, #30
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(400);
 8001afe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b02:	f003 fe17 	bl	8005734 <osDelay>
 8001b06:	e74b      	b.n	80019a0 <drivingTask_init+0x18>
}
else{
	straight();
 8001b08:	f7ff fd48 	bl	800159c <straight>
    TIM2->CCR4 = 75;
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	224b      	movs	r2, #75	; 0x4b
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
  {
 8001b14:	e744      	b.n	80019a0 <drivingTask_init+0x18>
 8001b16:	bf00      	nop
 8001b18:	9999999a 	.word	0x9999999a
 8001b1c:	40369999 	.word	0x40369999
 8001b20:	200007a4 	.word	0x200007a4
 8001b24:	2000075c 	.word	0x2000075c
 8001b28:	40012200 	.word	0x40012200
 8001b2c:	20000092 	.word	0x20000092
 8001b30:	20000094 	.word	0x20000094
 8001b34:	40000800 	.word	0x40000800
 8001b38:	200000a5 	.word	0x200000a5
 8001b3c:	0800898c 	.word	0x0800898c
 8001b40:	200000a8 	.word	0x200000a8
 8001b44:	08008994 	.word	0x08008994
 8001b48:	20000490 	.word	0x20000490
 8001b4c:	20000834 	.word	0x20000834
 8001b50:	20000090 	.word	0x20000090
 8001b54:	00000000 	.word	0x00000000

08001b58 <sensorTask_init>:
     }
  /* USER CODE END 5 */
}

void sensorTask_init(void *argument)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorTask_init */
  /* Infinite loop */
  for(;;)
  {
	  ADC1->CR2 |= 0x40000001;
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <sensorTask_init+0x98>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <sensorTask_init+0x98>)
 8001b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6093      	str	r3, [r2, #8]
	 	  ADC3->CR2 |= 0x40000001;
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <sensorTask_init+0x9c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <sensorTask_init+0x9c>)
 8001b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6093      	str	r3, [r2, #8]

	 	  value1 = ADC1->DR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <sensorTask_init+0x98>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <sensorTask_init+0xa0>)
 8001b88:	801a      	strh	r2, [r3, #0]
          value2 = ADC3->DR;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <sensorTask_init+0x9c>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <sensorTask_init+0xa4>)
 8001b92:	801a      	strh	r2, [r3, #0]

          distance = (3420-value2)/22.6;
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <sensorTask_init+0xa4>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	f5c3 6355 	rsb	r3, r3, #3408	; 0xd50
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc8 	bl	8000534 <__aeabi_i2d>
 8001ba4:	a310      	add	r3, pc, #64	; (adr r3, 8001be8 <sensorTask_init+0x90>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fe57 	bl	800085c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe ff39 	bl	8000a2c <__aeabi_d2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <sensorTask_init+0xa8>)
 8001bc0:	801a      	strh	r2, [r3, #0]

	 	 sprintf(buf2,"%d\r\n",value1);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <sensorTask_init+0xa0>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <sensorTask_init+0xac>)
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <sensorTask_init+0xb0>)
 8001bcc:	f006 fa66 	bl	800809c <siprintf>
       HAL_UART_Transmit(&huart6,buf2,sizeof(buf2),0xFFFF);
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bd8:	490b      	ldr	r1, [pc, #44]	; (8001c08 <sensorTask_init+0xb0>)
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <sensorTask_init+0xb4>)
 8001bdc:	f003 f925 	bl	8004e2a <HAL_UART_Transmit>

       osDelay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f003 fda7 	bl	8005734 <osDelay>
  {
 8001be6:	e7bb      	b.n	8001b60 <sensorTask_init+0x8>
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	40369999 	.word	0x40369999
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40012200 	.word	0x40012200
 8001bf8:	20000090 	.word	0x20000090
 8001bfc:	20000092 	.word	0x20000092
 8001c00:	20000094 	.word	0x20000094
 8001c04:	0800899c 	.word	0x0800899c
 8001c08:	2000029c 	.word	0x2000029c
 8001c0c:	20000878 	.word	0x20000878

08001c10 <Error_Handler>:
  }
  /* USER CODE END sensorTask_init */
}

void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop

  __disable_irq();
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <Error_Handler+0x8>
	...

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_MspInit+0x54>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_MspInit+0x54>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x54>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_MspInit+0x54>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_MspInit+0x54>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_MspInit+0x54>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	f06f 0001 	mvn.w	r0, #1
 8001c62:	f000 feb4 	bl	80029ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <HAL_ADC_MspInit+0x134>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d128      	bne.n	8001ce8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a43      	ldr	r2, [pc, #268]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a3c      	ldr	r2, [pc, #240]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4833      	ldr	r0, [pc, #204]	; (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001ce2:	f000 feab 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ce6:	e05a      	b.n	8001d9e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <HAL_ADC_MspInit+0x140>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d128      	bne.n	8001d44 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	481e      	ldr	r0, [pc, #120]	; (8001db8 <HAL_ADC_MspInit+0x144>)
 8001d3e:	f000 fe7d 	bl	8002a3c <HAL_GPIO_Init>
}
 8001d42:	e02c      	b.n	8001d9e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <HAL_ADC_MspInit+0x148>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d127      	bne.n	8001d9e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_ADC_MspInit+0x138>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d86:	2308      	movs	r3, #8
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <HAL_ADC_MspInit+0x144>)
 8001d9a:	f000 fe4f 	bl	8002a3c <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	; 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012000 	.word	0x40012000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40012100 	.word	0x40012100
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40012200 	.word	0x40012200

08001dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dee:	e012      	b.n	8001e16 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_TIM_PWM_MspInit+0x68>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10d      	bne.n	8001e16 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_TIM_PWM_MspInit+0x64>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40000800 	.word	0x40000800

08001e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_TIM_Base_MspInit+0x94>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d133      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_TIM_Base_MspInit+0x98>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e96:	2302      	movs	r3, #2
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_TIM_Base_MspInit+0x9c>)
 8001ea2:	f000 fdcb 	bl	8002a3c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	201d      	movs	r0, #29
 8001eac:	f000 fd8f 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb0:	201d      	movs	r0, #29
 8001eb2:	f000 fda8 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d11f      	bne.n	8001f2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4826      	ldr	r0, [pc, #152]	; (8001fc0 <HAL_TIM_MspPostInit+0xf4>)
 8001f28:	f000 fd88 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f2c:	e042      	b.n	8001fb4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <HAL_TIM_MspPostInit+0xf8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d13d      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_TIM_MspPostInit+0xf0>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f70:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f82:	2302      	movs	r3, #2
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_TIM_MspPostInit+0xfc>)
 8001f8e:	f000 fd55 	bl	8002a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <HAL_TIM_MspPostInit+0xf4>)
 8001fb0:	f000 fd44 	bl	8002a3c <HAL_GPIO_Init>
}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40020c00 	.word	0x40020c00

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <HAL_UART_MspInit+0xe8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12d      	bne.n	800204a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_UART_MspInit+0xec>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002038:	2307      	movs	r3, #7
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	481e      	ldr	r0, [pc, #120]	; (80020bc <HAL_UART_MspInit+0xf0>)
 8002044:	f000 fcfa 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002048:	e030      	b.n	80020ac <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_UART_MspInit+0xf4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12b      	bne.n	80020ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xec>)
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_UART_MspInit+0xec>)
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	6453      	str	r3, [r2, #68]	; 0x44
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_UART_MspInit+0xec>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_UART_MspInit+0xec>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800209c:	2308      	movs	r3, #8
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <HAL_UART_MspInit+0xf8>)
 80020a8:	f000 fcc8 	bl	8002a3c <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40004800 	.word	0x40004800
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40011400 	.word	0x40011400
 80020c4:	40020800 	.word	0x40020800

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f000 f8d8 	bl	80022ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020fc:	f004 ff28 	bl	8006f50 <xTaskGetSchedulerState>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002106:	f005 fd0f 	bl	8007b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM3_IRQHandler+0x10>)
 8002116:	f001 fdd7 	bl	8003cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200007a4 	.word	0x200007a4

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f005 ff62 	bl	800801c <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20030000 	.word	0x20030000
 8002184:	00000400 	.word	0x00000400
 8002188:	200008c4 	.word	0x200008c4
 800218c:	20005230 	.word	0x20005230

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d0:	4c0b      	ldr	r4, [pc, #44]	; (8002200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021de:	f7ff ffd7 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f005 ff21 	bl	8008028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e6:	f7fe fdc3 	bl	8000d70 <main>
  bx  lr    
 80021ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021f8:	08008a60 	.word	0x08008a60
  ldr r2, =_sbss
 80021fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002200:	2000522c 	.word	0x2000522c

08002204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC_IRQHandler>
	...

08002208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_Init+0x40>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_Init+0x40>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_Init+0x40>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 fbc1 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002236:	200f      	movs	r0, #15
 8002238:	f000 f808 	bl	800224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800223c:	f7ff fcee 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x54>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x58>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	fbb3 f3f1 	udiv	r3, r3, r1
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fbd9 	bl	8002a22 <HAL_SYSTICK_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d80a      	bhi.n	8002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f000 fba1 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_InitTick+0x5c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008
 80022d0:	200008c8 	.word	0x200008c8

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200008c8 	.word	0x200008c8

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008

08002334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e033      	b.n	80023b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fc8e 	bl	8001c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f94a 	bl	8002620 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
 80023a2:	e001      	b.n	80023a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1c>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e113      	b.n	8002600 <HAL_ADC_ConfigChannel+0x244>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d925      	bls.n	8002434 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	2207      	movs	r2, #7
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43da      	mvns	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	400a      	ands	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68d9      	ldr	r1, [r3, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	4603      	mov	r3, r0
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4403      	add	r3, r0
 8002426:	3b1e      	subs	r3, #30
 8002428:	409a      	lsls	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	e022      	b.n	800247a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	4603      	mov	r3, r0
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4403      	add	r3, r0
 8002470:	409a      	lsls	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d824      	bhi.n	80024cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b05      	subs	r3, #5
 8002494:	221f      	movs	r2, #31
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b05      	subs	r3, #5
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ca:	e04c      	b.n	8002566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d824      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b23      	subs	r3, #35	; 0x23
 80024e6:	221f      	movs	r2, #31
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43da      	mvns	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	400a      	ands	r2, r1
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b23      	subs	r3, #35	; 0x23
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
 800251c:	e023      	b.n	8002566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b41      	subs	r3, #65	; 0x41
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b41      	subs	r3, #65	; 0x41
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_ADC_ConfigChannel+0x250>)
 8002568:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_ADC_ConfigChannel+0x254>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10f      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d8>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_ADC_ConfigChannel+0x254>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_ADC_ConfigChannel+0x258>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x1f4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d122      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_ADC_ConfigChannel+0x258>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_ADC_ConfigChannel+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_ADC_ConfigChannel+0x260>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	0c9a      	lsrs	r2, r3, #18
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	40012000 	.word	0x40012000
 8002614:	10000012 	.word	0x10000012
 8002618:	20000000 	.word	0x20000000
 800261c:	431bde83 	.word	0x431bde83

08002620 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <ADC_Init+0x1f0>)
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	4a58      	ldr	r2, [pc, #352]	; (8002814 <ADC_Init+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e00f      	b.n	800271e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0202 	bic.w	r2, r2, #2
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800276a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	035a      	lsls	r2, r3, #13
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e007      	b.n	8002794 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	051a      	lsls	r2, r3, #20
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027d6:	025a      	lsls	r2, r3, #9
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	029a      	lsls	r2, r3, #10
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012300 	.word	0x40012300
 8002814:	0f000001 	.word	0x0f000001

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e177      	b.n	8002d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8166 	bne.w	8002d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d130      	bne.n	8002af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80c0 	beq.w	8002d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bde:	4a61      	ldr	r2, [pc, #388]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_GPIO_Init+0x32c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d037      	beq.n	8002c7a <HAL_GPIO_Init+0x23e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_GPIO_Init+0x23a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_GPIO_Init+0x334>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02b      	beq.n	8002c72 <HAL_GPIO_Init+0x236>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_GPIO_Init+0x338>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d025      	beq.n	8002c6e <HAL_GPIO_Init+0x232>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x33c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01f      	beq.n	8002c6a <HAL_GPIO_Init+0x22e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_GPIO_Init+0x340>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d019      	beq.n	8002c66 <HAL_GPIO_Init+0x22a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x344>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x348>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x34c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_GPIO_Init+0x21a>
 8002c52:	2309      	movs	r3, #9
 8002c54:	e012      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c56:	230a      	movs	r3, #10
 8002c58:	e010      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e00e      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e00c      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00a      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c66:	2305      	movs	r3, #5
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f ae84 	bls.w	8002a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40021400 	.word	0x40021400
 8002d80:	40021800 	.word	0x40021800
 8002d84:	40021c00 	.word	0x40021c00
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022400 	.word	0x40022400
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e267      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d075      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d00c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b85      	ldr	r3, [pc, #532]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d112      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfe:	4b82      	ldr	r3, [pc, #520]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x108>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d157      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e242      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x74>
 8002e2e:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6f      	ldr	r2, [pc, #444]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6c      	ldr	r2, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a68      	ldr	r2, [pc, #416]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7ff fa28 	bl	80022d4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7ff fa24 	bl	80022d4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e207      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xc0>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fa14 	bl	80022d4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fa10 	bl	80022d4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1f3      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	4b51      	ldr	r3, [pc, #324]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xe8>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d063      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x152>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1c7      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4937      	ldr	r1, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	e03a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f38:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x244>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f9c9 	bl	80022d4 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff f9c5 	bl	80022d4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1a8      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x244>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff f9a8 	bl	80022d4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f88:	f7ff f9a4 	bl	80022d4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e187      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCC_OscConfig+0x248>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7ff f988 	bl	80022d4 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7ff f984 	bl	80022d4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e167      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x200>
 8002fe6:	e01b      	b.n	8003020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_OscConfig+0x248>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7ff f971 	bl	80022d4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	e00e      	b.n	8003014 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7ff f96d 	bl	80022d4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e150      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ea      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8097 	beq.w	800315c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a7c      	ldr	r2, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b77      	ldr	r3, [pc, #476]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b74      	ldr	r3, [pc, #464]	; (800323c <HAL_RCC_OscConfig+0x474>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a73      	ldr	r2, [pc, #460]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7ff f92d 	bl	80022d4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7ff f929 	bl	80022d4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e10c      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2ea>
 80030a4:	4b64      	ldr	r3, [pc, #400]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	e01c      	b.n	80030ec <HAL_RCC_OscConfig+0x324>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x30c>
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a5e      	ldr	r2, [pc, #376]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a5b      	ldr	r2, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0x324>
 80030d4:	4b58      	ldr	r3, [pc, #352]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a57      	ldr	r2, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	4b55      	ldr	r3, [pc, #340]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7ff f8ee 	bl	80022d4 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7ff f8ea 	bl	80022d4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0cb      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ee      	beq.n	80030fc <HAL_RCC_OscConfig+0x334>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7ff f8d8 	bl	80022d4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7ff f8d4 	bl	80022d4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0b5      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ee      	bne.n	8003128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a38      	ldr	r2, [pc, #224]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a1 	beq.w	80032a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d05c      	beq.n	800322c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d141      	bne.n	80031fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7ff f8a8 	bl	80022d4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7ff f8a4 	bl	80022d4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e087      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7ff f87d 	bl	80022d4 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031de:	f7ff f879 	bl	80022d4 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e05c      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x416>
 80031fc:	e054      	b.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f866 	bl	80022d4 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7ff f862 	bl	80022d4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e045      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x444>
 800322a:	e03d      	b.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e038      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000
 8003240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x4ec>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d028      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d121      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d11a      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800327a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327c:	4293      	cmp	r3, r2
 800327e:	d111      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	3b01      	subs	r3, #1
 800328e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0cc      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d90c      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a58      	ldr	r2, [pc, #352]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	494d      	ldr	r1, [pc, #308]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d044      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d119      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	2b03      	cmp	r3, #3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e067      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe ff94 	bl	80022d4 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe ff90 	bl	80022d4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e04f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d20c      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4916      	ldr	r1, [pc, #88]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490e      	ldr	r1, [pc, #56]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	490a      	ldr	r1, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fef4 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00
 8003474:	40023800 	.word	0x40023800
 8003478:	08008a04 	.word	0x08008a04
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b094      	sub	sp, #80	; 0x50
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
 8003490:	2300      	movs	r3, #0
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	2300      	movs	r3, #0
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x40>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	f200 80e1 	bhi.w	8003670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x3a>
 80034b6:	e0db      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b73      	ldr	r3, [pc, #460]	; (8003688 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034bc:	e0db      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_GetSysClockFreq+0x208>)
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c2:	e0d8      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034da:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	2200      	movs	r2, #0
 80034e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
 80034ee:	2300      	movs	r3, #0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4621      	mov	r1, r4
 8003510:	1a51      	subs	r1, r2, r1
 8003512:	6139      	str	r1, [r7, #16]
 8003514:	4629      	mov	r1, r5
 8003516:	eb63 0301 	sbc.w	r3, r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	018b      	lsls	r3, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003532:	4651      	mov	r1, sl
 8003534:	018a      	lsls	r2, r1, #6
 8003536:	4651      	mov	r1, sl
 8003538:	ebb2 0801 	subs.w	r8, r2, r1
 800353c:	4659      	mov	r1, fp
 800353e:	eb63 0901 	sbc.w	r9, r3, r1
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	4623      	mov	r3, r4
 800355c:	eb18 0303 	adds.w	r3, r8, r3
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	462b      	mov	r3, r5
 8003564:	eb49 0303 	adc.w	r3, r9, r3
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003576:	4629      	mov	r1, r5
 8003578:	024b      	lsls	r3, r1, #9
 800357a:	4621      	mov	r1, r4
 800357c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003580:	4621      	mov	r1, r4
 8003582:	024a      	lsls	r2, r1, #9
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
 800358e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003594:	f7fd fa6a 	bl	8000a6c <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a0:	e058      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	2200      	movs	r2, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	4611      	mov	r1, r2
 80035ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	f04f 0000 	mov.w	r0, #0
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	0159      	lsls	r1, r3, #5
 80035ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ce:	0150      	lsls	r0, r2, #5
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4641      	mov	r1, r8
 80035d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035da:	4649      	mov	r1, r9
 80035dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f4:	ebb2 040a 	subs.w	r4, r2, sl
 80035f8:	eb63 050b 	sbc.w	r5, r3, fp
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	00eb      	lsls	r3, r5, #3
 8003606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360a:	00e2      	lsls	r2, r4, #3
 800360c:	4614      	mov	r4, r2
 800360e:	461d      	mov	r5, r3
 8003610:	4643      	mov	r3, r8
 8003612:	18e3      	adds	r3, r4, r3
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	464b      	mov	r3, r9
 8003618:	eb45 0303 	adc.w	r3, r5, r3
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362a:	4629      	mov	r1, r5
 800362c:	028b      	lsls	r3, r1, #10
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003634:	4621      	mov	r1, r4
 8003636:	028a      	lsls	r2, r1, #10
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	61fa      	str	r2, [r7, #28]
 8003644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003648:	f7fd fa10 	bl	8000a6c <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetSysClockFreq+0x204>)
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003678:	4618      	mov	r0, r3
 800367a:	3750      	adds	r7, #80	; 0x50
 800367c:	46bd      	mov	sp, r7
 800367e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	00f42400 	.word	0x00f42400
 800368c:	007a1200 	.word	0x007a1200

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff0 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	08008a14 	.word	0x08008a14

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d4:	f7ff ffdc 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0b5b      	lsrs	r3, r3, #13
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	08008a14 	.word	0x08008a14

080036f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe fb84 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 fe60 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e041      	b.n	800382c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fe faff 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f000 fe11 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start+0x24>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e022      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d109      	bne.n	8003872 <HAL_TIM_PWM_Start+0x3e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e015      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start+0x58>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07c      	b.n	80039a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0x82>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b4:	e013      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x92>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c4:	e00b      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d4:	e003      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f99c 	bl	8004c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_TIM_PWM_Start+0x174>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <HAL_TIM_PWM_Start+0x178>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_PWM_Start+0xd0>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_TIM_PWM_Start+0xd2>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_TIM_PWM_Start+0x174>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d01d      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_TIM_PWM_Start+0x17c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_TIM_PWM_Start+0x180>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_TIM_PWM_Start+0x184>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_TIM_PWM_Start+0x178>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_TIM_PWM_Start+0x188>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <HAL_TIM_PWM_Start+0x18c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d010      	beq.n	800399e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	e007      	b.n	800399e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40010400 	.word	0x40010400
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40001800 	.word	0x40001800

080039c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f839 	bl	8003a62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fcfa 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_IC_Start_IT+0x1e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e013      	b.n	8003abe <HAL_TIM_IC_Start_IT+0x46>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_IC_Start_IT+0x2e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e00b      	b.n	8003abe <HAL_TIM_IC_Start_IT+0x46>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_IC_Start_IT+0x3e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e003      	b.n	8003abe <HAL_TIM_IC_Start_IT+0x46>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <HAL_TIM_IC_Start_IT+0x58>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e013      	b.n	8003af8 <HAL_TIM_IC_Start_IT+0x80>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d104      	bne.n	8003ae0 <HAL_TIM_IC_Start_IT+0x68>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e00b      	b.n	8003af8 <HAL_TIM_IC_Start_IT+0x80>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d104      	bne.n	8003af0 <HAL_TIM_IC_Start_IT+0x78>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e003      	b.n	8003af8 <HAL_TIM_IC_Start_IT+0x80>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003afa:	7bbb      	ldrb	r3, [r7, #14]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b00:	7b7b      	ldrb	r3, [r7, #13]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0cc      	b.n	8003ca4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_IC_Start_IT+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b18:	e013      	b.n	8003b42 <HAL_TIM_IC_Start_IT+0xca>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_IC_Start_IT+0xb2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	e00b      	b.n	8003b42 <HAL_TIM_IC_Start_IT+0xca>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_IC_Start_IT+0xc2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b38:	e003      	b.n	8003b42 <HAL_TIM_IC_Start_IT+0xca>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_IC_Start_IT+0xda>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	e013      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x102>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_IC_Start_IT+0xea>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b60:	e00b      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x102>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_IC_Start_IT+0xfa>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b70:	e003      	b.n	8003b7a <HAL_TIM_IC_Start_IT+0x102>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d841      	bhi.n	8003c04 <HAL_TIM_IC_Start_IT+0x18c>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <HAL_TIM_IC_Start_IT+0x110>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003c05 	.word	0x08003c05
 8003b90:	08003c05 	.word	0x08003c05
 8003b94:	08003c05 	.word	0x08003c05
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003c05 	.word	0x08003c05
 8003ba4:	08003c05 	.word	0x08003c05
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003c05 	.word	0x08003c05
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003c05 	.word	0x08003c05
 8003bb8:	08003bf3 	.word	0x08003bf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0202 	orr.w	r2, r2, #2
 8003bca:	60da      	str	r2, [r3, #12]
      break;
 8003bcc:	e01d      	b.n	8003c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0204 	orr.w	r2, r2, #4
 8003bdc:	60da      	str	r2, [r3, #12]
      break;
 8003bde:	e014      	b.n	8003c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	60da      	str	r2, [r3, #12]
      break;
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0210 	orr.w	r2, r2, #16
 8003c00:	60da      	str	r2, [r3, #12]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d148      	bne.n	8003ca2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 f803 	bl	8004c24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_TIM_IC_Start_IT+0x234>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d01d      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_TIM_IC_Start_IT+0x238>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_TIM_IC_Start_IT+0x23c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_TIM_IC_Start_IT+0x240>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_TIM_IC_Start_IT+0x244>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIM_IC_Start_IT+0x248>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIM_IC_Start_IT+0x24c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d010      	beq.n	8003ca2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	e007      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40001800 	.word	0x40001800

08003cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0202 	mvn.w	r2, #2
 8003cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd fd7c 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb54 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fb5b 	bl	80043d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0204 	mvn.w	r2, #4
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fd52 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb2a 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fb31 	bl	80043d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0208 	mvn.w	r2, #8
 8003d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fd28 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fb00 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fb07 	bl	80043d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0210 	mvn.w	r2, #16
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2208      	movs	r2, #8
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fcfe 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fad6 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fadd 	bl	80043d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10e      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d107      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0201 	mvn.w	r2, #1
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fab0 	bl	80043ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d107      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 ff82 	bl	8004d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 faa2 	bl	80043e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0220 	mvn.w	r2, #32
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 ff4c 	bl	8004d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e088      	b.n	8004008 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f000 fcc2 	bl	800489c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 020c 	bic.w	r2, r2, #12
 8003f26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	619a      	str	r2, [r3, #24]
 8003f3a:	e060      	b.n	8003ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d11c      	bne.n	8003f7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f000 fd46 	bl	80049e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6999      	ldr	r1, [r3, #24]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]
 8003f7a:	e040      	b.n	8003ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11b      	bne.n	8003fba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f000 fd93 	bl	8004abc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 020c 	bic.w	r2, r2, #12
 8003fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69d9      	ldr	r1, [r3, #28]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	61da      	str	r2, [r3, #28]
 8003fb8:	e021      	b.n	8003ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d11c      	bne.n	8003ffa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f000 fdb0 	bl	8004b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fe2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69d9      	ldr	r1, [r3, #28]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	021a      	lsls	r2, r3, #8
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	61da      	str	r2, [r3, #28]
 8003ff8:	e001      	b.n	8003ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e0ae      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	f200 809f 	bhi.w	800417c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004079 	.word	0x08004079
 8004048:	0800417d 	.word	0x0800417d
 800404c:	0800417d 	.word	0x0800417d
 8004050:	0800417d 	.word	0x0800417d
 8004054:	080040b9 	.word	0x080040b9
 8004058:	0800417d 	.word	0x0800417d
 800405c:	0800417d 	.word	0x0800417d
 8004060:	0800417d 	.word	0x0800417d
 8004064:	080040fb 	.word	0x080040fb
 8004068:	0800417d 	.word	0x0800417d
 800406c:	0800417d 	.word	0x0800417d
 8004070:	0800417d 	.word	0x0800417d
 8004074:	0800413b 	.word	0x0800413b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa5c 	bl	800453c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0208 	orr.w	r2, r2, #8
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	619a      	str	r2, [r3, #24]
      break;
 80040b6:	e064      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 faac 	bl	800461c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6999      	ldr	r1, [r3, #24]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]
      break;
 80040f8:	e043      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb01 	bl	8004708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0208 	orr.w	r2, r2, #8
 8004114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0204 	bic.w	r2, r2, #4
 8004124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	61da      	str	r2, [r3, #28]
      break;
 8004138:	e023      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fb55 	bl	80047f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69d9      	ldr	r1, [r3, #28]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	021a      	lsls	r2, r3, #8
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	61da      	str	r2, [r3, #28]
      break;
 800417a:	e002      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
      break;
 8004180:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_TIM_ConfigClockSource+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0b4      	b.n	800431a <HAL_TIM_ConfigClockSource+0x186>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e8:	d03e      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0xd4>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	f200 8087 	bhi.w	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	f000 8086 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x172>
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d87f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b70      	cmp	r3, #112	; 0x70
 8004202:	d01a      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xa6>
 8004204:	2b70      	cmp	r3, #112	; 0x70
 8004206:	d87b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b60      	cmp	r3, #96	; 0x60
 800420a:	d050      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x11a>
 800420c:	2b60      	cmp	r3, #96	; 0x60
 800420e:	d877      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b50      	cmp	r3, #80	; 0x50
 8004212:	d03c      	beq.n	800428e <HAL_TIM_ConfigClockSource+0xfa>
 8004214:	2b50      	cmp	r3, #80	; 0x50
 8004216:	d873      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d058      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x13a>
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d86f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b30      	cmp	r3, #48	; 0x30
 8004222:	d064      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004224:	2b30      	cmp	r3, #48	; 0x30
 8004226:	d86b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d060      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d867      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	2b10      	cmp	r3, #16
 8004236:	d05a      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004238:	e062      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6899      	ldr	r1, [r3, #8]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f000 fccb 	bl	8004be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800425c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
      break;
 8004266:	e04f      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6899      	ldr	r1, [r3, #8]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f000 fcb4 	bl	8004be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428a:	609a      	str	r2, [r3, #8]
      break;
 800428c:	e03c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	461a      	mov	r2, r3
 800429c:	f000 fb72 	bl	8004984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2150      	movs	r1, #80	; 0x50
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fc81 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80042ac:	e02c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fbce 	bl	8004a5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2160      	movs	r1, #96	; 0x60
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fc71 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80042cc:	e01c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 fb52 	bl	8004984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fc61 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80042ec:	e00c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 fc58 	bl	8004bae <TIM_ITRx_SetConfig>
      break;
 80042fe:	e003      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e000      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d831      	bhi.n	800439c <HAL_TIM_ReadCapturedValue+0x78>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_ReadCapturedValue+0x1c>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004375 	.word	0x08004375
 8004344:	0800439d 	.word	0x0800439d
 8004348:	0800439d 	.word	0x0800439d
 800434c:	0800439d 	.word	0x0800439d
 8004350:	0800437f 	.word	0x0800437f
 8004354:	0800439d 	.word	0x0800439d
 8004358:	0800439d 	.word	0x0800439d
 800435c:	0800439d 	.word	0x0800439d
 8004360:	08004389 	.word	0x08004389
 8004364:	0800439d 	.word	0x0800439d
 8004368:	0800439d 	.word	0x0800439d
 800436c:	0800439d 	.word	0x0800439d
 8004370:	08004393 	.word	0x08004393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	60fb      	str	r3, [r7, #12]

      break;
 800437c:	e00f      	b.n	800439e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	60fb      	str	r3, [r7, #12]

      break;
 8004386:	e00a      	b.n	800439e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	60fb      	str	r3, [r7, #12]

      break;
 8004390:	e005      	b.n	800439e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	60fb      	str	r3, [r7, #12]

      break;
 800439a:	e000      	b.n	800439e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800439c:	bf00      	nop
  }

  return tmpreg;
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <TIM_Base_SetConfig+0x114>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d00f      	beq.n	800443c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a3d      	ldr	r2, [pc, #244]	; (8004514 <TIM_Base_SetConfig+0x118>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <TIM_Base_SetConfig+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a3b      	ldr	r2, [pc, #236]	; (800451c <TIM_Base_SetConfig+0x120>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <TIM_Base_SetConfig+0x124>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2f      	ldr	r2, [pc, #188]	; (8004510 <TIM_Base_SetConfig+0x114>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02b      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d027      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <TIM_Base_SetConfig+0x118>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d023      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <TIM_Base_SetConfig+0x11c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <TIM_Base_SetConfig+0x120>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01b      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <TIM_Base_SetConfig+0x124>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d017      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a28      	ldr	r2, [pc, #160]	; (8004524 <TIM_Base_SetConfig+0x128>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <TIM_Base_SetConfig+0x12c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00f      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <TIM_Base_SetConfig+0x130>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <TIM_Base_SetConfig+0x134>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a24      	ldr	r2, [pc, #144]	; (8004534 <TIM_Base_SetConfig+0x138>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <TIM_Base_SetConfig+0x13c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d108      	bne.n	80044c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <TIM_Base_SetConfig+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0xf8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <TIM_Base_SetConfig+0x124>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40010400 	.word	0x40010400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	40001800 	.word	0x40001800
 8004534:	40001c00 	.word	0x40001c00
 8004538:	40002000 	.word	0x40002000

0800453c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0302 	bic.w	r3, r3, #2
 8004584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a20      	ldr	r2, [pc, #128]	; (8004614 <TIM_OC1_SetConfig+0xd8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC1_SetConfig+0x64>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <TIM_OC1_SetConfig+0xdc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0308 	bic.w	r3, r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <TIM_OC1_SetConfig+0xd8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC1_SetConfig+0x8e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <TIM_OC1_SetConfig+0xdc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d111      	bne.n	80045ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0320 	bic.w	r3, r3, #32
 8004666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a22      	ldr	r2, [pc, #136]	; (8004700 <TIM_OC2_SetConfig+0xe4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC2_SetConfig+0x68>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <TIM_OC2_SetConfig+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10d      	bne.n	80046a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a17      	ldr	r2, [pc, #92]	; (8004700 <TIM_OC2_SetConfig+0xe4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC2_SetConfig+0x94>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <TIM_OC2_SetConfig+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d113      	bne.n	80046d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40010400 	.word	0x40010400

08004708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_OC3_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC3_SetConfig+0x66>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <TIM_OC3_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10d      	bne.n	800478a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <TIM_OC3_SetConfig+0xe0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC3_SetConfig+0x92>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <TIM_OC3_SetConfig+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d113      	bne.n	80047c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40010400 	.word	0x40010400

080047f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <TIM_OC4_SetConfig+0xa4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_OC4_SetConfig+0x68>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a11      	ldr	r2, [pc, #68]	; (8004898 <TIM_OC4_SetConfig+0xa8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40010400 	.word	0x40010400

0800489c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_TI1_SetConfig+0xcc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01b      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d017      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_TI1_SetConfig+0xd0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <TIM_TI1_SetConfig+0xd4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_TI1_SetConfig+0xd8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_TI1_SetConfig+0xdc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <TIM_TI1_SetConfig+0xe0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_TI1_SetConfig+0x66>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <TIM_TI1_SetConfig+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <TIM_TI1_SetConfig+0x6a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <TIM_TI1_SetConfig+0x6c>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e003      	b.n	8004926 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	b2db      	uxtb	r3, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 030a 	and.w	r3, r3, #10
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40010400 	.word	0x40010400
 800497c:	40014000 	.word	0x40014000
 8004980:	40001800 	.word	0x40001800

08004984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 030a 	bic.w	r3, r3, #10
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b087      	sub	sp, #28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f023 0210 	bic.w	r2, r3, #16
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	031b      	lsls	r3, r3, #12
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f023 0303 	bic.w	r3, r3, #3
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	621a      	str	r2, [r3, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	031b      	lsls	r3, r3, #12
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	031b      	lsls	r3, r3, #12
 8004b8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f043 0307 	orr.w	r3, r3, #7
 8004bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	609a      	str	r2, [r3, #8]
}
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2201      	movs	r2, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e05a      	b.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d01d      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10c      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40010400 	.word	0x40010400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40001800 	.word	0x40001800

08004d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e03f      	b.n	8004e22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd f908 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f929 	bl	800502c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b08a      	sub	sp, #40	; 0x28
 8004e2e:	af02      	add	r7, sp, #8
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d17c      	bne.n	8004f44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_UART_Transmit+0x2c>
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e075      	b.n	8004f46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_UART_Transmit+0x3e>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e06e      	b.n	8004f46 <HAL_UART_Transmit+0x11c>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2221      	movs	r2, #33	; 0x21
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7e:	f7fd fa29 	bl	80022d4 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d108      	bne.n	8004eac <HAL_UART_Transmit+0x82>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e003      	b.n	8004eb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ebc:	e02a      	b.n	8004f14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f840 	bl	8004f4e <UART_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e036      	b.n	8004f46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e007      	b.n	8004f06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1cf      	bne.n	8004ebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2140      	movs	r1, #64	; 0x40
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f810 	bl	8004f4e <UART_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b090      	sub	sp, #64	; 0x40
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5e:	e050      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d04c      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6e:	f7fd f9b1 	bl	80022d4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d241      	bcs.n	8005002 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f9e:	637a      	str	r2, [r7, #52]	; 0x34
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd2:	623a      	str	r2, [r7, #32]
 8004fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	69f9      	ldr	r1, [r7, #28]
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e5      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e00f      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d09f      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3740      	adds	r7, #64	; 0x40
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b0c0      	sub	sp, #256	; 0x100
 8005032:	af00      	add	r7, sp, #0
 8005034:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	68d9      	ldr	r1, [r3, #12]
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	ea40 0301 	orr.w	r3, r0, r1
 8005054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	431a      	orrs	r2, r3
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	431a      	orrs	r2, r3
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005084:	f021 010c 	bic.w	r1, r1, #12
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005092:	430b      	orrs	r3, r1
 8005094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	6999      	ldr	r1, [r3, #24]
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	ea40 0301 	orr.w	r3, r0, r1
 80050b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b8f      	ldr	r3, [pc, #572]	; (80052f8 <UART_SetConfig+0x2cc>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	d005      	beq.n	80050cc <UART_SetConfig+0xa0>
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b8d      	ldr	r3, [pc, #564]	; (80052fc <UART_SetConfig+0x2d0>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d104      	bne.n	80050d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7fe fb00 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 80050d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050d4:	e003      	b.n	80050de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d6:	f7fe fae7 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 80050da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	f040 810c 	bne.w	8005304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	1891      	adds	r1, r2, r2
 8005104:	65b9      	str	r1, [r7, #88]	; 0x58
 8005106:	415b      	adcs	r3, r3
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800510e:	4621      	mov	r1, r4
 8005110:	eb12 0801 	adds.w	r8, r2, r1
 8005114:	4629      	mov	r1, r5
 8005116:	eb43 0901 	adc.w	r9, r3, r1
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800512a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800512e:	4690      	mov	r8, r2
 8005130:	4699      	mov	r9, r3
 8005132:	4623      	mov	r3, r4
 8005134:	eb18 0303 	adds.w	r3, r8, r3
 8005138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800513c:	462b      	mov	r3, r5
 800513e:	eb49 0303 	adc.w	r3, r9, r3
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005152:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800515a:	460b      	mov	r3, r1
 800515c:	18db      	adds	r3, r3, r3
 800515e:	653b      	str	r3, [r7, #80]	; 0x50
 8005160:	4613      	mov	r3, r2
 8005162:	eb42 0303 	adc.w	r3, r2, r3
 8005166:	657b      	str	r3, [r7, #84]	; 0x54
 8005168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800516c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005170:	f7fb fc7c 	bl	8000a6c <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b61      	ldr	r3, [pc, #388]	; (8005300 <UART_SetConfig+0x2d4>)
 800517a:	fba3 2302 	umull	r2, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	011c      	lsls	r4, r3, #4
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800518c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	1891      	adds	r1, r2, r2
 800519a:	64b9      	str	r1, [r7, #72]	; 0x48
 800519c:	415b      	adcs	r3, r3
 800519e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051a4:	4641      	mov	r1, r8
 80051a6:	eb12 0a01 	adds.w	sl, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb43 0b01 	adc.w	fp, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c4:	4692      	mov	sl, r2
 80051c6:	469b      	mov	fp, r3
 80051c8:	4643      	mov	r3, r8
 80051ca:	eb1a 0303 	adds.w	r3, sl, r3
 80051ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051d2:	464b      	mov	r3, r9
 80051d4:	eb4b 0303 	adc.w	r3, fp, r3
 80051d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051f0:	460b      	mov	r3, r1
 80051f2:	18db      	adds	r3, r3, r3
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	4613      	mov	r3, r2
 80051f8:	eb42 0303 	adc.w	r3, r2, r3
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005206:	f7fb fc31 	bl	8000a6c <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4611      	mov	r1, r2
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <UART_SetConfig+0x2d4>)
 8005212:	fba3 2301 	umull	r2, r3, r3, r1
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	2264      	movs	r2, #100	; 0x64
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	1acb      	subs	r3, r1, r3
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005226:	4b36      	ldr	r3, [pc, #216]	; (8005300 <UART_SetConfig+0x2d4>)
 8005228:	fba3 2302 	umull	r2, r3, r3, r2
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005234:	441c      	add	r4, r3
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005240:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005250:	415b      	adcs	r3, r3
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6339      	str	r1, [r7, #48]	; 0x30
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800528c:	464b      	mov	r3, r9
 800528e:	460a      	mov	r2, r1
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052ac:	460b      	mov	r3, r1
 80052ae:	18db      	adds	r3, r3, r3
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b2:	4613      	mov	r3, r2
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052c2:	f7fb fbd3 	bl	8000a6c <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <UART_SetConfig+0x2d4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	; 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	3332      	adds	r3, #50	; 0x32
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <UART_SetConfig+0x2d4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 0207 	and.w	r2, r3, #7
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4422      	add	r2, r4
 80052f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052f4:	e105      	b.n	8005502 <UART_SetConfig+0x4d6>
 80052f6:	bf00      	nop
 80052f8:	40011000 	.word	0x40011000
 80052fc:	40011400 	.word	0x40011400
 8005300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800530e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005316:	4642      	mov	r2, r8
 8005318:	464b      	mov	r3, r9
 800531a:	1891      	adds	r1, r2, r2
 800531c:	6239      	str	r1, [r7, #32]
 800531e:	415b      	adcs	r3, r3
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005326:	4641      	mov	r1, r8
 8005328:	1854      	adds	r4, r2, r1
 800532a:	4649      	mov	r1, r9
 800532c:	eb43 0501 	adc.w	r5, r3, r1
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	00eb      	lsls	r3, r5, #3
 800533a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533e:	00e2      	lsls	r2, r4, #3
 8005340:	4614      	mov	r4, r2
 8005342:	461d      	mov	r5, r3
 8005344:	4643      	mov	r3, r8
 8005346:	18e3      	adds	r3, r4, r3
 8005348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800534c:	464b      	mov	r3, r9
 800534e:	eb45 0303 	adc.w	r3, r5, r3
 8005352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005372:	4629      	mov	r1, r5
 8005374:	008b      	lsls	r3, r1, #2
 8005376:	4621      	mov	r1, r4
 8005378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800537c:	4621      	mov	r1, r4
 800537e:	008a      	lsls	r2, r1, #2
 8005380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005384:	f7fb fb72 	bl	8000a6c <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4b60      	ldr	r3, [pc, #384]	; (8005510 <UART_SetConfig+0x4e4>)
 800538e:	fba3 2302 	umull	r2, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	011c      	lsls	r4, r3, #4
 8005396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800539a:	2200      	movs	r2, #0
 800539c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	1891      	adds	r1, r2, r2
 80053ae:	61b9      	str	r1, [r7, #24]
 80053b0:	415b      	adcs	r3, r3
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b8:	4641      	mov	r1, r8
 80053ba:	1851      	adds	r1, r2, r1
 80053bc:	6139      	str	r1, [r7, #16]
 80053be:	4649      	mov	r1, r9
 80053c0:	414b      	adcs	r3, r1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053d0:	4659      	mov	r1, fp
 80053d2:	00cb      	lsls	r3, r1, #3
 80053d4:	4651      	mov	r1, sl
 80053d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053da:	4651      	mov	r1, sl
 80053dc:	00ca      	lsls	r2, r1, #3
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	4642      	mov	r2, r8
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ec:	464b      	mov	r3, r9
 80053ee:	460a      	mov	r2, r1
 80053f0:	eb42 0303 	adc.w	r3, r2, r3
 80053f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	67bb      	str	r3, [r7, #120]	; 0x78
 8005402:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005410:	4649      	mov	r1, r9
 8005412:	008b      	lsls	r3, r1, #2
 8005414:	4641      	mov	r1, r8
 8005416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541a:	4641      	mov	r1, r8
 800541c:	008a      	lsls	r2, r1, #2
 800541e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005422:	f7fb fb23 	bl	8000a6c <__aeabi_uldivmod>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4b39      	ldr	r3, [pc, #228]	; (8005510 <UART_SetConfig+0x4e4>)
 800542c:	fba3 1302 	umull	r1, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	2164      	movs	r1, #100	; 0x64
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	3332      	adds	r3, #50	; 0x32
 800543e:	4a34      	ldr	r2, [pc, #208]	; (8005510 <UART_SetConfig+0x4e4>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800544a:	441c      	add	r4, r3
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	2200      	movs	r2, #0
 8005452:	673b      	str	r3, [r7, #112]	; 0x70
 8005454:	677a      	str	r2, [r7, #116]	; 0x74
 8005456:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800545a:	4642      	mov	r2, r8
 800545c:	464b      	mov	r3, r9
 800545e:	1891      	adds	r1, r2, r2
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	415b      	adcs	r3, r3
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800546a:	4641      	mov	r1, r8
 800546c:	1851      	adds	r1, r2, r1
 800546e:	6039      	str	r1, [r7, #0]
 8005470:	4649      	mov	r1, r9
 8005472:	414b      	adcs	r3, r1
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005482:	4659      	mov	r1, fp
 8005484:	00cb      	lsls	r3, r1, #3
 8005486:	4651      	mov	r1, sl
 8005488:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548c:	4651      	mov	r1, sl
 800548e:	00ca      	lsls	r2, r1, #3
 8005490:	4610      	mov	r0, r2
 8005492:	4619      	mov	r1, r3
 8005494:	4603      	mov	r3, r0
 8005496:	4642      	mov	r2, r8
 8005498:	189b      	adds	r3, r3, r2
 800549a:	66bb      	str	r3, [r7, #104]	; 0x68
 800549c:	464b      	mov	r3, r9
 800549e:	460a      	mov	r2, r1
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	663b      	str	r3, [r7, #96]	; 0x60
 80054b0:	667a      	str	r2, [r7, #100]	; 0x64
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054be:	4649      	mov	r1, r9
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	4641      	mov	r1, r8
 80054c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c8:	4641      	mov	r1, r8
 80054ca:	008a      	lsls	r2, r1, #2
 80054cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054d0:	f7fb facc 	bl	8000a6c <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <UART_SetConfig+0x4e4>)
 80054da:	fba3 1302 	umull	r1, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2164      	movs	r1, #100	; 0x64
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	3332      	adds	r3, #50	; 0x32
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <UART_SetConfig+0x4e4>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4422      	add	r2, r4
 8005500:	609a      	str	r2, [r3, #8]
}
 8005502:	bf00      	nop
 8005504:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550e:	bf00      	nop
 8005510:	51eb851f 	.word	0x51eb851f

08005514 <__NVIC_SetPriority>:
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005524:	2b00      	cmp	r3, #0
 8005526:	db0a      	blt.n	800553e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	490c      	ldr	r1, [pc, #48]	; (8005560 <__NVIC_SetPriority+0x4c>)
 800552e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005532:	0112      	lsls	r2, r2, #4
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	440b      	add	r3, r1
 8005538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800553c:	e00a      	b.n	8005554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4908      	ldr	r1, [pc, #32]	; (8005564 <__NVIC_SetPriority+0x50>)
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	3b04      	subs	r3, #4
 800554c:	0112      	lsls	r2, r2, #4
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	440b      	add	r3, r1
 8005552:	761a      	strb	r2, [r3, #24]
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000e100 	.word	0xe000e100
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800556c:	2100      	movs	r1, #0
 800556e:	f06f 0004 	mvn.w	r0, #4
 8005572:	f7ff ffcf 	bl	8005514 <__NVIC_SetPriority>
#endif
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005582:	f3ef 8305 	mrs	r3, IPSR
 8005586:	603b      	str	r3, [r7, #0]
  return(result);
 8005588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800558e:	f06f 0305 	mvn.w	r3, #5
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	e00c      	b.n	80055b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <osKernelInitialize+0x44>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <osKernelInitialize+0x44>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	e002      	b.n	80055b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055b0:	687b      	ldr	r3, [r7, #4]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	200008cc 	.word	0x200008cc

080055c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ca:	f3ef 8305 	mrs	r3, IPSR
 80055ce:	603b      	str	r3, [r7, #0]
  return(result);
 80055d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <osKernelStart+0x1a>
    stat = osErrorISR;
 80055d6:	f06f 0305 	mvn.w	r3, #5
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	e010      	b.n	8005600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <osKernelStart+0x48>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d109      	bne.n	80055fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055e6:	f7ff ffbf 	bl	8005568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <osKernelStart+0x48>)
 80055ec:	2202      	movs	r2, #2
 80055ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055f0:	f001 f866 	bl	80066c0 <vTaskStartScheduler>
      stat = osOK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	e002      	b.n	8005600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005600:	687b      	ldr	r3, [r7, #4]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200008cc 	.word	0x200008cc

08005610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	; 0x38
 8005614:	af04      	add	r7, sp, #16
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005620:	f3ef 8305 	mrs	r3, IPSR
 8005624:	617b      	str	r3, [r7, #20]
  return(result);
 8005626:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005628:	2b00      	cmp	r3, #0
 800562a:	d17e      	bne.n	800572a <osThreadNew+0x11a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d07b      	beq.n	800572a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005636:	2318      	movs	r3, #24
 8005638:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d045      	beq.n	80056d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <osThreadNew+0x48>
        name = attr->name;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <osThreadNew+0x6e>
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b38      	cmp	r3, #56	; 0x38
 8005670:	d805      	bhi.n	800567e <osThreadNew+0x6e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <osThreadNew+0x72>
        return (NULL);
 800567e:	2300      	movs	r3, #0
 8005680:	e054      	b.n	800572c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <osThreadNew+0xa8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b5b      	cmp	r3, #91	; 0x5b
 80056a0:	d90a      	bls.n	80056b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <osThreadNew+0xa8>
        mem = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e010      	b.n	80056da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <osThreadNew+0xca>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <osThreadNew+0xca>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <osThreadNew+0xca>
          mem = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e001      	b.n	80056da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d110      	bne.n	8005702 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e8:	9202      	str	r2, [sp, #8]
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fe0c 	bl	8006314 <xTaskCreateStatic>
 80056fc:	4603      	mov	r3, r0
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e013      	b.n	800572a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d110      	bne.n	800572a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	b29a      	uxth	r2, r3
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 fe57 	bl	80063ce <xTaskCreate>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <osThreadNew+0x11a>
            hTask = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800572a:	693b      	ldr	r3, [r7, #16]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800573c:	f3ef 8305 	mrs	r3, IPSR
 8005740:	60bb      	str	r3, [r7, #8]
  return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <osDelay+0x1c>
    stat = osErrorISR;
 8005748:	f06f 0305 	mvn.w	r3, #5
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e007      	b.n	8005760 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <osDelay+0x2c>
      vTaskDelay(ticks);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 ff7c 	bl	8006658 <vTaskDelay>
    }
  }

  return (stat);
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <vApplicationGetIdleTaskMemory+0x2c>)
 800577c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a06      	ldr	r2, [pc, #24]	; (800579c <vApplicationGetIdleTaskMemory+0x30>)
 8005782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	601a      	str	r2, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	200008d0 	.word	0x200008d0
 800579c:	2000092c 	.word	0x2000092c

080057a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a07      	ldr	r2, [pc, #28]	; (80057cc <vApplicationGetTimerTaskMemory+0x2c>)
 80057b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <vApplicationGetTimerTaskMemory+0x30>)
 80057b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000b2c 	.word	0x20000b2c
 80057d0:	20000b88 	.word	0x20000b88

080057d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f103 0208 	add.w	r2, r3, #8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f103 0208 	add.w	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f103 0208 	add.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d103      	bne.n	8005896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e00c      	b.n	80058b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3308      	adds	r3, #8
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e002      	b.n	80058a4 <vListInsert+0x2e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d2f6      	bcs.n	800589e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6892      	ldr	r2, [r2, #8]
 80058fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6852      	ldr	r2, [r2, #4]
 8005908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d103      	bne.n	800591c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	1e5a      	subs	r2, r3, #1
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005966:	f002 f84d 	bl	8007a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	441a      	add	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	3b01      	subs	r3, #1
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3310      	adds	r3, #16
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f903 	bl	8006bd4 <xTaskRemoveFromEventList>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d012      	beq.n	80059fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <xQueueGenericReset+0xcc>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	e009      	b.n	80059fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3310      	adds	r3, #16
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fef2 	bl	80057d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff feed 	bl	80057d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059fa:	f002 f833 	bl	8007a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <xQueueGenericCreateStatic+0x52>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <xQueueGenericCreateStatic+0x56>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <xQueueGenericCreateStatic+0x58>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <xQueueGenericCreateStatic+0x7e>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xQueueGenericCreateStatic+0x82>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericCreateStatic+0x84>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61fb      	str	r3, [r7, #28]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005aaa:	2350      	movs	r3, #80	; 0x50
 8005aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d00a      	beq.n	8005aca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61bb      	str	r3, [r7, #24]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005aca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ade:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f805 	bl	8005afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3730      	adds	r7, #48	; 0x30
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	69b8      	ldr	r0, [r7, #24]
 8005b2e:	f7ff ff05 	bl	800593c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	; 0x38
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b52:	2300      	movs	r3, #0
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xQueueGenericSend+0x32>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <xQueueGenericSend+0x40>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <xQueueGenericSend+0x44>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <xQueueGenericSend+0x46>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xQueueGenericSend+0x60>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSend+0x6e>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSend+0x72>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSend+0x74>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	623b      	str	r3, [r7, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bd2:	f001 f9bd 	bl	8006f50 <xTaskGetSchedulerState>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <xQueueGenericSend+0x9e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <xQueueGenericSend+0xa2>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueGenericSend+0xa4>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xQueueGenericSend+0xbe>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	61fb      	str	r3, [r7, #28]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c02:	f001 feff 	bl	8007a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d302      	bcc.n	8005c18 <xQueueGenericSend+0xd4>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d129      	bne.n	8005c6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1e:	f000 fa0b 	bl	8006038 <prvCopyDataToQueue>
 8005c22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	3324      	adds	r3, #36	; 0x24
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 ffcf 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <xQueueGenericSend+0x1f8>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	e00a      	b.n	8005c64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c54:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <xQueueGenericSend+0x1f8>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c64:	f001 fefe 	bl	8007a64 <vPortExitCritical>
				return pdPASS;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e063      	b.n	8005d34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c72:	f001 fef7 	bl	8007a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e05c      	b.n	8005d34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 f809 	bl	8006c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c8e:	f001 fee9 	bl	8007a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c92:	f000 fd7b 	bl	800678c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c96:	f001 feb5 	bl	8007a04 <vPortEnterCritical>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d103      	bne.n	8005cb0 <xQueueGenericSend+0x16c>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d103      	bne.n	8005cc6 <xQueueGenericSend+0x182>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc6:	f001 fecd 	bl	8007a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cca:	1d3a      	adds	r2, r7, #4
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fff8 	bl	8006cc8 <xTaskCheckForTimeOut>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d124      	bne.n	8005d28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce0:	f000 faa2 	bl	8006228 <prvIsQueueFull>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d018      	beq.n	8005d1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	3310      	adds	r3, #16
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 ff1e 	bl	8006b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfa:	f000 fa2d 	bl	8006158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cfe:	f000 fd53 	bl	80067a8 <xTaskResumeAll>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f47f af7c 	bne.w	8005c02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <xQueueGenericSend+0x1f8>)
 8005d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	e772      	b.n	8005c02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d1e:	f000 fa1b 	bl	8006158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d22:	f000 fd41 	bl	80067a8 <xTaskResumeAll>
 8005d26:	e76c      	b.n	8005c02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2a:	f000 fa15 	bl	8006158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d2e:	f000 fd3b 	bl	80067a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3738      	adds	r7, #56	; 0x38
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b090      	sub	sp, #64	; 0x40
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <xQueueGenericSendFromISR+0x3c>
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <xQueueGenericSendFromISR+0x40>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <xQueueGenericSendFromISR+0x42>
 8005d80:	2300      	movs	r3, #0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d103      	bne.n	8005daa <xQueueGenericSendFromISR+0x6a>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <xQueueGenericSendFromISR+0x6e>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <xQueueGenericSendFromISR+0x70>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	623b      	str	r3, [r7, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dca:	f001 fefd 	bl	8007bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dce:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	61fa      	str	r2, [r7, #28]
 8005de4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005de6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <xQueueGenericSendFromISR+0xbc>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d12f      	bne.n	8005e5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e12:	f000 f911 	bl	8006038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d112      	bne.n	8005e46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fed1 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00e      	beq.n	8005e56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e007      	b.n	8005e56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	b25a      	sxtb	r2, r3
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e56:	2301      	movs	r3, #1
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e5a:	e001      	b.n	8005e60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3740      	adds	r7, #64	; 0x40
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	; 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <xQueueReceive+0x30>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	623b      	str	r3, [r7, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <xQueueReceive+0x3e>
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueReceive+0x42>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueReceive+0x44>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xQueueReceive+0x5e>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61fb      	str	r3, [r7, #28]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ed6:	f001 f83b 	bl	8006f50 <xTaskGetSchedulerState>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueueReceive+0x6e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueueReceive+0x72>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueReceive+0x74>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueReceive+0x8e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	61bb      	str	r3, [r7, #24]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f06:	f001 fd7d 	bl	8007a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01f      	beq.n	8005f56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 f8f7 	bl	800610c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00f      	beq.n	8005f4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	3310      	adds	r3, #16
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fe4e 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f3e:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <xQueueReceive+0x1bc>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f4e:	f001 fd89 	bl	8007a64 <vPortExitCritical>
				return pdPASS;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e069      	b.n	800602a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d103      	bne.n	8005f64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f5c:	f001 fd82 	bl	8007a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e062      	b.n	800602a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f6a:	f107 0310 	add.w	r3, r7, #16
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fe94 	bl	8006c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f78:	f001 fd74 	bl	8007a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f7c:	f000 fc06 	bl	800678c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f80:	f001 fd40 	bl	8007a04 <vPortEnterCritical>
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d103      	bne.n	8005f9a <xQueueReceive+0x122>
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d103      	bne.n	8005fb0 <xQueueReceive+0x138>
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb0:	f001 fd58 	bl	8007a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fb4:	1d3a      	adds	r2, r7, #4
 8005fb6:	f107 0310 	add.w	r3, r7, #16
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fe83 	bl	8006cc8 <xTaskCheckForTimeOut>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d123      	bne.n	8006010 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fca:	f000 f917 	bl	80061fc <prvIsQueueEmpty>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d017      	beq.n	8006004 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fda9 	bl	8006b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe4:	f000 f8b8 	bl	8006158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe8:	f000 fbde 	bl	80067a8 <xTaskResumeAll>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d189      	bne.n	8005f06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <xQueueReceive+0x1bc>)
 8005ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	e780      	b.n	8005f06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006006:	f000 f8a7 	bl	8006158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800600a:	f000 fbcd 	bl	80067a8 <xTaskResumeAll>
 800600e:	e77a      	b.n	8005f06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006012:	f000 f8a1 	bl	8006158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006016:	f000 fbc7 	bl	80067a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800601a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601c:	f000 f8ee 	bl	80061fc <prvIsQueueEmpty>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f43f af6f 	beq.w	8005f06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800602a:	4618      	mov	r0, r3
 800602c:	3730      	adds	r7, #48	; 0x30
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d14d      	bne.n	80060fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff92 	bl	8006f8c <xTaskPriorityDisinherit>
 8006068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	e043      	b.n	80060fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d119      	bne.n	80060ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6858      	ldr	r0, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	461a      	mov	r2, r3
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	f001 fff4 	bl	8008070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d32b      	bcc.n	80060fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	e026      	b.n	80060fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68d8      	ldr	r0, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	461a      	mov	r2, r3
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	f001 ffda 	bl	8008070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	425b      	negs	r3, r3
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d207      	bcs.n	80060e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	425b      	negs	r3, r3
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d105      	bne.n	80060fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d303      	bcc.n	8006140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68d9      	ldr	r1, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	461a      	mov	r2, r3
 800614a:	6838      	ldr	r0, [r7, #0]
 800614c:	f001 ff90 	bl	8008070 <memcpy>
	}
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006160:	f001 fc50 	bl	8007a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800616c:	e011      	b.n	8006192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d012      	beq.n	800619c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fd2a 	bl	8006bd4 <xTaskRemoveFromEventList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006186:	f000 fe01 	bl	8006d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	3b01      	subs	r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	dce9      	bgt.n	800616e <prvUnlockQueue+0x16>
 800619a:	e000      	b.n	800619e <prvUnlockQueue+0x46>
					break;
 800619c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fc5d 	bl	8007a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061aa:	f001 fc2b 	bl	8007a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b6:	e011      	b.n	80061dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d012      	beq.n	80061e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3310      	adds	r3, #16
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fd05 	bl	8006bd4 <xTaskRemoveFromEventList>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061d0:	f000 fddc 	bl	8006d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dce9      	bgt.n	80061b8 <prvUnlockQueue+0x60>
 80061e4:	e000      	b.n	80061e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	22ff      	movs	r2, #255	; 0xff
 80061ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061f0:	f001 fc38 	bl	8007a64 <vPortExitCritical>
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006204:	f001 fbfe 	bl	8007a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e001      	b.n	800621a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800621a:	f001 fc23 	bl	8007a64 <vPortExitCritical>

	return xReturn;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006230:	f001 fbe8 	bl	8007a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	429a      	cmp	r2, r3
 800623e:	d102      	bne.n	8006246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e001      	b.n	800624a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800624a:	f001 fc0b 	bl	8007a64 <vPortExitCritical>

	return xReturn;
 800624e:	68fb      	ldr	r3, [r7, #12]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e014      	b.n	8006292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006268:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <vQueueAddToRegistry+0x50>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006274:	490c      	ldr	r1, [pc, #48]	; (80062a8 <vQueueAddToRegistry+0x50>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <vQueueAddToRegistry+0x50>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800628a:	e006      	b.n	800629a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b07      	cmp	r3, #7
 8006296:	d9e7      	bls.n	8006268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000f88 	.word	0x20000f88

080062ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062bc:	f001 fba2 	bl	8007a04 <vPortEnterCritical>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c6:	b25b      	sxtb	r3, r3
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d103      	bne.n	80062d6 <vQueueWaitForMessageRestricted+0x2a>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d103      	bne.n	80062ec <vQueueWaitForMessageRestricted+0x40>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ec:	f001 fbba 	bl	8007a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fc3b 	bl	8006b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006306:	6978      	ldr	r0, [r7, #20]
 8006308:	f7ff ff26 	bl	8006158 <prvUnlockQueue>
	}
 800630c:	bf00      	nop
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af04      	add	r7, sp, #16
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	623b      	str	r3, [r7, #32]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xTaskCreateStatic+0x46>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	61fb      	str	r3, [r7, #28]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800635a:	235c      	movs	r3, #92	; 0x5c
 800635c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b5c      	cmp	r3, #92	; 0x5c
 8006362:	d00a      	beq.n	800637a <xTaskCreateStatic+0x66>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	61bb      	str	r3, [r7, #24]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800637a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01e      	beq.n	80063c0 <xTaskCreateStatic+0xac>
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006390:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800639a:	2300      	movs	r3, #0
 800639c:	9303      	str	r3, [sp, #12]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	f107 0314 	add.w	r3, r7, #20
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f850 	bl	8006458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ba:	f000 f8dd 	bl	8006578 <prvAddNewTaskToReadyList>
 80063be:	e001      	b.n	80063c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
	}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08c      	sub	sp, #48	; 0x30
 80063d2:	af04      	add	r7, sp, #16
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fc30 	bl	8007c48 <pvPortMalloc>
 80063e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f0:	205c      	movs	r0, #92	; 0x5c
 80063f2:	f001 fc29 	bl	8007c48 <pvPortMalloc>
 80063f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
 8006404:	e005      	b.n	8006412 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f001 fcea 	bl	8007de0 <vPortFree>
 800640c:	e001      	b.n	8006412 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	2300      	movs	r3, #0
 8006424:	9303      	str	r3, [sp, #12]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	9302      	str	r3, [sp, #8]
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f80e 	bl	8006458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800643c:	69f8      	ldr	r0, [r7, #28]
 800643e:	f000 f89b 	bl	8006578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e002      	b.n	800644e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800644e:	69bb      	ldr	r3, [r7, #24]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	461a      	mov	r2, r3
 8006470:	21a5      	movs	r1, #165	; 0xa5
 8006472:	f001 fe0b 	bl	800808c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006480:	3b01      	subs	r3, #1
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	617b      	str	r3, [r7, #20]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01f      	beq.n	80064f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e012      	b.n	80064e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	7819      	ldrb	r1, [r3, #0]
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	3334      	adds	r3, #52	; 0x34
 80064cc:	460a      	mov	r2, r1
 80064ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b0f      	cmp	r3, #15
 80064e6:	d9e9      	bls.n	80064bc <prvInitialiseNewTask+0x64>
 80064e8:	e000      	b.n	80064ec <prvInitialiseNewTask+0x94>
			{
				break;
 80064ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f4:	e003      	b.n	80064fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b37      	cmp	r3, #55	; 0x37
 8006502:	d901      	bls.n	8006508 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006504:	2337      	movs	r3, #55	; 0x37
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2200      	movs	r2, #0
 8006518:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	3304      	adds	r3, #4
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff f978 	bl	8005814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	3318      	adds	r3, #24
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f973 	bl	8005814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	69b8      	ldr	r0, [r7, #24]
 8006558:	f001 f928 	bl	80077ac <pxPortInitialiseStack>
 800655c:	4602      	mov	r2, r0
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656e:	bf00      	nop
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006580:	f001 fa40 	bl	8007a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006584:	4b2d      	ldr	r3, [pc, #180]	; (800663c <prvAddNewTaskToReadyList+0xc4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a2c      	ldr	r2, [pc, #176]	; (800663c <prvAddNewTaskToReadyList+0xc4>)
 800658c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800658e:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <prvAddNewTaskToReadyList+0xc8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006596:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <prvAddNewTaskToReadyList+0xc8>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800659c:	4b27      	ldr	r3, [pc, #156]	; (800663c <prvAddNewTaskToReadyList+0xc4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d110      	bne.n	80065c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065a4:	f000 fc16 	bl	8006dd4 <prvInitialiseTaskLists>
 80065a8:	e00d      	b.n	80065c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065aa:	4b26      	ldr	r3, [pc, #152]	; (8006644 <prvAddNewTaskToReadyList+0xcc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065b2:	4b23      	ldr	r3, [pc, #140]	; (8006640 <prvAddNewTaskToReadyList+0xc8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	429a      	cmp	r2, r3
 80065be:	d802      	bhi.n	80065c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <prvAddNewTaskToReadyList+0xc8>)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065c6:	4b20      	ldr	r3, [pc, #128]	; (8006648 <prvAddNewTaskToReadyList+0xd0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <prvAddNewTaskToReadyList+0xd0>)
 80065ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065d0:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <prvAddNewTaskToReadyList+0xd0>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <prvAddNewTaskToReadyList+0xd4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d903      	bls.n	80065ec <prvAddNewTaskToReadyList+0x74>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	4a18      	ldr	r2, [pc, #96]	; (800664c <prvAddNewTaskToReadyList+0xd4>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4a15      	ldr	r2, [pc, #84]	; (8006650 <prvAddNewTaskToReadyList+0xd8>)
 80065fa:	441a      	add	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3304      	adds	r3, #4
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7ff f913 	bl	800582e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006608:	f001 fa2c 	bl	8007a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <prvAddNewTaskToReadyList+0xcc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <prvAddNewTaskToReadyList+0xc8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	429a      	cmp	r2, r3
 8006620:	d207      	bcs.n	8006632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <prvAddNewTaskToReadyList+0xdc>)
 8006624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	2000149c 	.word	0x2000149c
 8006640:	20000fc8 	.word	0x20000fc8
 8006644:	200014a8 	.word	0x200014a8
 8006648:	200014b8 	.word	0x200014b8
 800664c:	200014a4 	.word	0x200014a4
 8006650:	20000fcc 	.word	0x20000fcc
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d017      	beq.n	800669a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <vTaskDelay+0x60>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <vTaskDelay+0x30>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60bb      	str	r3, [r7, #8]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006688:	f000 f880 	bl	800678c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fcea 	bl	8007068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006694:	f000 f888 	bl	80067a8 <xTaskResumeAll>
 8006698:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <vTaskDelay+0x64>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	200014c4 	.word	0x200014c4
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066ce:	463a      	mov	r2, r7
 80066d0:	1d39      	adds	r1, r7, #4
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff f848 	bl	800576c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	460a      	mov	r2, r1
 80066ee:	4921      	ldr	r1, [pc, #132]	; (8006774 <vTaskStartScheduler+0xb4>)
 80066f0:	4821      	ldr	r0, [pc, #132]	; (8006778 <vTaskStartScheduler+0xb8>)
 80066f2:	f7ff fe0f 	bl	8006314 <xTaskCreateStatic>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <vTaskStartScheduler+0xbc>)
 80066fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066fc:	4b1f      	ldr	r3, [pc, #124]	; (800677c <vTaskStartScheduler+0xbc>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e001      	b.n	800670e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006714:	f000 fcfc 	bl	8007110 <xTimerCreateTimerTask>
 8006718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d116      	bne.n	800674e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006734:	4b12      	ldr	r3, [pc, #72]	; (8006780 <vTaskStartScheduler+0xc0>)
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800673c:	4b11      	ldr	r3, [pc, #68]	; (8006784 <vTaskStartScheduler+0xc4>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <vTaskStartScheduler+0xc8>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006748:	f001 f8ba 	bl	80078c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800674c:	e00e      	b.n	800676c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d10a      	bne.n	800676c <vTaskStartScheduler+0xac>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60fb      	str	r3, [r7, #12]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <vTaskStartScheduler+0xaa>
}
 800676c:	bf00      	nop
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	080089a4 	.word	0x080089a4
 8006778:	08006da5 	.word	0x08006da5
 800677c:	200014c0 	.word	0x200014c0
 8006780:	200014bc 	.word	0x200014bc
 8006784:	200014a8 	.word	0x200014a8
 8006788:	200014a0 	.word	0x200014a0

0800678c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <vTaskSuspendAll+0x18>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a03      	ldr	r2, [pc, #12]	; (80067a4 <vTaskSuspendAll+0x18>)
 8006798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	200014c4 	.word	0x200014c4

080067a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067b6:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <xTaskResumeAll+0x118>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067d4:	f001 f916 	bl	8007a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067d8:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <xTaskResumeAll+0x118>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a38      	ldr	r2, [pc, #224]	; (80068c0 <xTaskResumeAll+0x118>)
 80067e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e2:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <xTaskResumeAll+0x118>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d162      	bne.n	80068b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067ea:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <xTaskResumeAll+0x11c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d05e      	beq.n	80068b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067f2:	e02f      	b.n	8006854 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f4:	4b34      	ldr	r3, [pc, #208]	; (80068c8 <xTaskResumeAll+0x120>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3318      	adds	r3, #24
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff f871 	bl	80058e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff f86c 	bl	80058e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <xTaskResumeAll+0x124>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d903      	bls.n	8006824 <xTaskResumeAll+0x7c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <xTaskResumeAll+0x124>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4a27      	ldr	r2, [pc, #156]	; (80068d0 <xTaskResumeAll+0x128>)
 8006832:	441a      	add	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe fff7 	bl	800582e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	4b23      	ldr	r3, [pc, #140]	; (80068d4 <xTaskResumeAll+0x12c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <xTaskResumeAll+0x130>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006854:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <xTaskResumeAll+0x120>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1cb      	bne.n	80067f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006862:	f000 fb55 	bl	8006f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <xTaskResumeAll+0x134>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d010      	beq.n	8006894 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006872:	f000 f847 	bl	8006904 <xTaskIncrementTick>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <xTaskResumeAll+0x130>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3b01      	subs	r3, #1
 8006886:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f1      	bne.n	8006872 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <xTaskResumeAll+0x134>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <xTaskResumeAll+0x130>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskResumeAll+0x138>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068b0:	f001 f8d8 	bl	8007a64 <vPortExitCritical>

	return xAlreadyYielded;
 80068b4:	68bb      	ldr	r3, [r7, #8]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200014c4 	.word	0x200014c4
 80068c4:	2000149c 	.word	0x2000149c
 80068c8:	2000145c 	.word	0x2000145c
 80068cc:	200014a4 	.word	0x200014a4
 80068d0:	20000fcc 	.word	0x20000fcc
 80068d4:	20000fc8 	.word	0x20000fc8
 80068d8:	200014b0 	.word	0x200014b0
 80068dc:	200014ac 	.word	0x200014ac
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <xTaskGetTickCount+0x1c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068f0:	687b      	ldr	r3, [r7, #4]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	200014a0 	.word	0x200014a0

08006904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800690e:	4b4f      	ldr	r3, [pc, #316]	; (8006a4c <xTaskIncrementTick+0x148>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 808f 	bne.w	8006a36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006918:	4b4d      	ldr	r3, [pc, #308]	; (8006a50 <xTaskIncrementTick+0x14c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006920:	4a4b      	ldr	r2, [pc, #300]	; (8006a50 <xTaskIncrementTick+0x14c>)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d120      	bne.n	800696e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800692c:	4b49      	ldr	r3, [pc, #292]	; (8006a54 <xTaskIncrementTick+0x150>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <xTaskIncrementTick+0x48>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	603b      	str	r3, [r7, #0]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <xTaskIncrementTick+0x46>
 800694c:	4b41      	ldr	r3, [pc, #260]	; (8006a54 <xTaskIncrementTick+0x150>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <xTaskIncrementTick+0x154>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <xTaskIncrementTick+0x150>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4a3f      	ldr	r2, [pc, #252]	; (8006a58 <xTaskIncrementTick+0x154>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <xTaskIncrementTick+0x158>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	4a3d      	ldr	r2, [pc, #244]	; (8006a5c <xTaskIncrementTick+0x158>)
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	f000 fad1 	bl	8006f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800696e:	4b3c      	ldr	r3, [pc, #240]	; (8006a60 <xTaskIncrementTick+0x15c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	429a      	cmp	r2, r3
 8006976:	d349      	bcc.n	8006a0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006978:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <xTaskIncrementTick+0x150>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006982:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <xTaskIncrementTick+0x15c>)
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	601a      	str	r2, [r3, #0]
					break;
 800698a:	e03f      	b.n	8006a0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698c:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <xTaskIncrementTick+0x150>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d203      	bcs.n	80069ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069a4:	4a2e      	ldr	r2, [pc, #184]	; (8006a60 <xTaskIncrementTick+0x15c>)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069aa:	e02f      	b.n	8006a0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe ff99 	bl	80058e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	3318      	adds	r3, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe ff90 	bl	80058e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <xTaskIncrementTick+0x160>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d903      	bls.n	80069dc <xTaskIncrementTick+0xd8>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <xTaskIncrementTick+0x160>)
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <xTaskIncrementTick+0x164>)
 80069ea:	441a      	add	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7fe ff1b 	bl	800582e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <xTaskIncrementTick+0x168>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3b8      	bcc.n	8006978 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0a:	e7b5      	b.n	8006978 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a0c:	4b17      	ldr	r3, [pc, #92]	; (8006a6c <xTaskIncrementTick+0x168>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	4915      	ldr	r1, [pc, #84]	; (8006a68 <xTaskIncrementTick+0x164>)
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d901      	bls.n	8006a28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a28:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <xTaskIncrementTick+0x16c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e004      	b.n	8006a40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <xTaskIncrementTick+0x170>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a0d      	ldr	r2, [pc, #52]	; (8006a74 <xTaskIncrementTick+0x170>)
 8006a3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a40:	697b      	ldr	r3, [r7, #20]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200014c4 	.word	0x200014c4
 8006a50:	200014a0 	.word	0x200014a0
 8006a54:	20001454 	.word	0x20001454
 8006a58:	20001458 	.word	0x20001458
 8006a5c:	200014b4 	.word	0x200014b4
 8006a60:	200014bc 	.word	0x200014bc
 8006a64:	200014a4 	.word	0x200014a4
 8006a68:	20000fcc 	.word	0x20000fcc
 8006a6c:	20000fc8 	.word	0x20000fc8
 8006a70:	200014b0 	.word	0x200014b0
 8006a74:	200014ac 	.word	0x200014ac

08006a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <vTaskSwitchContext+0xa8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a86:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <vTaskSwitchContext+0xac>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a8c:	e041      	b.n	8006b12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a8e:	4b25      	ldr	r3, [pc, #148]	; (8006b24 <vTaskSwitchContext+0xac>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <vTaskSwitchContext+0xb0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e010      	b.n	8006abe <vTaskSwitchContext+0x46>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	607b      	str	r3, [r7, #4]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <vTaskSwitchContext+0x3e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	491b      	ldr	r1, [pc, #108]	; (8006b2c <vTaskSwitchContext+0xb4>)
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0e4      	beq.n	8006a9c <vTaskSwitchContext+0x24>
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <vTaskSwitchContext+0xb4>)
 8006ade:	4413      	add	r3, r2
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	3308      	adds	r3, #8
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d104      	bne.n	8006b02 <vTaskSwitchContext+0x8a>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <vTaskSwitchContext+0xb8>)
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4a06      	ldr	r2, [pc, #24]	; (8006b28 <vTaskSwitchContext+0xb0>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6013      	str	r3, [r2, #0]
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	200014c4 	.word	0x200014c4
 8006b24:	200014b0 	.word	0x200014b0
 8006b28:	200014a4 	.word	0x200014a4
 8006b2c:	20000fcc 	.word	0x20000fcc
 8006b30:	20000fc8 	.word	0x20000fc8

08006b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <vTaskPlaceOnEventList+0x44>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fe fe87 	bl	8005876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6838      	ldr	r0, [r7, #0]
 8006b6c:	f000 fa7c 	bl	8007068 <prvAddCurrentTaskToDelayedList>
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000fc8 	.word	0x20000fc8

08006b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	617b      	str	r3, [r7, #20]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3318      	adds	r3, #24
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7fe fe3e 	bl	800582e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	f000 fa51 	bl	8007068 <prvAddCurrentTaskToDelayedList>
	}
 8006bc6:	bf00      	nop
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000fc8 	.word	0x20000fc8

08006bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	3318      	adds	r3, #24
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fe6f 	bl	80058e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <xTaskRemoveFromEventList+0xb0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11d      	bne.n	8006c4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fe66 	bl	80058e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <xTaskRemoveFromEventList+0xb4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d903      	bls.n	8006c30 <xTaskRemoveFromEventList+0x5c>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <xTaskRemoveFromEventList+0xb4>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a13      	ldr	r2, [pc, #76]	; (8006c8c <xTaskRemoveFromEventList+0xb8>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fdf1 	bl	800582e <vListInsertEnd>
 8006c4c:	e005      	b.n	8006c5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3318      	adds	r3, #24
 8006c52:	4619      	mov	r1, r3
 8006c54:	480e      	ldr	r0, [pc, #56]	; (8006c90 <xTaskRemoveFromEventList+0xbc>)
 8006c56:	f7fe fdea 	bl	800582e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <xTaskRemoveFromEventList+0xc0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d905      	bls.n	8006c74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <xTaskRemoveFromEventList+0xc4>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e001      	b.n	8006c78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200014c4 	.word	0x200014c4
 8006c88:	200014a4 	.word	0x200014a4
 8006c8c:	20000fcc 	.word	0x20000fcc
 8006c90:	2000145c 	.word	0x2000145c
 8006c94:	20000fc8 	.word	0x20000fc8
 8006c98:	200014b0 	.word	0x200014b0

08006c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <vTaskInternalSetTimeOutState+0x24>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <vTaskInternalSetTimeOutState+0x28>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	200014b4 	.word	0x200014b4
 8006cc4:	200014a0 	.word	0x200014a0

08006cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	613b      	str	r3, [r7, #16]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60fb      	str	r3, [r7, #12]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d0a:	f000 fe7b 	bl	8007a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <xTaskCheckForTimeOut+0xbc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d102      	bne.n	8006d2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e023      	b.n	8006d76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <xTaskCheckForTimeOut+0xc0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d007      	beq.n	8006d4a <xTaskCheckForTimeOut+0x82>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e015      	b.n	8006d76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d20b      	bcs.n	8006d6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff9b 	bl	8006c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e004      	b.n	8006d76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d76:	f000 fe75 	bl	8007a64 <vPortExitCritical>

	return xReturn;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200014a0 	.word	0x200014a0
 8006d88:	200014b4 	.word	0x200014b4

08006d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d90:	4b03      	ldr	r3, [pc, #12]	; (8006da0 <vTaskMissedYield+0x14>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	200014b0 	.word	0x200014b0

08006da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dac:	f000 f852 	bl	8006e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <prvIdleTask+0x28>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d9f9      	bls.n	8006dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <prvIdleTask+0x2c>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dc8:	e7f0      	b.n	8006dac <prvIdleTask+0x8>
 8006dca:	bf00      	nop
 8006dcc:	20000fcc 	.word	0x20000fcc
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	e00c      	b.n	8006dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <prvInitialiseTaskLists+0x60>)
 8006dec:	4413      	add	r3, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fcf0 	bl	80057d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b37      	cmp	r3, #55	; 0x37
 8006dfe:	d9ef      	bls.n	8006de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e00:	480d      	ldr	r0, [pc, #52]	; (8006e38 <prvInitialiseTaskLists+0x64>)
 8006e02:	f7fe fce7 	bl	80057d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e06:	480d      	ldr	r0, [pc, #52]	; (8006e3c <prvInitialiseTaskLists+0x68>)
 8006e08:	f7fe fce4 	bl	80057d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e0c:	480c      	ldr	r0, [pc, #48]	; (8006e40 <prvInitialiseTaskLists+0x6c>)
 8006e0e:	f7fe fce1 	bl	80057d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e12:	480c      	ldr	r0, [pc, #48]	; (8006e44 <prvInitialiseTaskLists+0x70>)
 8006e14:	f7fe fcde 	bl	80057d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e18:	480b      	ldr	r0, [pc, #44]	; (8006e48 <prvInitialiseTaskLists+0x74>)
 8006e1a:	f7fe fcdb 	bl	80057d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <prvInitialiseTaskLists+0x78>)
 8006e20:	4a05      	ldr	r2, [pc, #20]	; (8006e38 <prvInitialiseTaskLists+0x64>)
 8006e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvInitialiseTaskLists+0x7c>)
 8006e26:	4a05      	ldr	r2, [pc, #20]	; (8006e3c <prvInitialiseTaskLists+0x68>)
 8006e28:	601a      	str	r2, [r3, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000fcc 	.word	0x20000fcc
 8006e38:	2000142c 	.word	0x2000142c
 8006e3c:	20001440 	.word	0x20001440
 8006e40:	2000145c 	.word	0x2000145c
 8006e44:	20001470 	.word	0x20001470
 8006e48:	20001488 	.word	0x20001488
 8006e4c:	20001454 	.word	0x20001454
 8006e50:	20001458 	.word	0x20001458

08006e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5a:	e019      	b.n	8006e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e5c:	f000 fdd2 	bl	8007a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e60:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <prvCheckTasksWaitingTermination+0x50>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fd3b 	bl	80058e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e72:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <prvCheckTasksWaitingTermination+0x54>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <prvCheckTasksWaitingTermination+0x54>)
 8006e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e86:	f000 fded 	bl	8007a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f810 	bl	8006eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <prvCheckTasksWaitingTermination+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e1      	bne.n	8006e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20001470 	.word	0x20001470
 8006ea8:	2000149c 	.word	0x2000149c
 8006eac:	20001484 	.word	0x20001484

08006eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d108      	bne.n	8006ed4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 ff8a 	bl	8007de0 <vPortFree>
				vPortFree( pxTCB );
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 ff87 	bl	8007de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ed2:	e018      	b.n	8006f06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d103      	bne.n	8006ee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 ff7e 	bl	8007de0 <vPortFree>
	}
 8006ee4:	e00f      	b.n	8006f06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d00a      	beq.n	8006f06 <prvDeleteTCB+0x56>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <prvDeleteTCB+0x54>
	}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f16:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvResetNextTaskUnblockTime+0x38>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <prvResetNextTaskUnblockTime+0x3c>)
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f28:	e008      	b.n	8006f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2a:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <prvResetNextTaskUnblockTime+0x38>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <prvResetNextTaskUnblockTime+0x3c>)
 8006f3a:	6013      	str	r3, [r2, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	20001454 	.word	0x20001454
 8006f4c:	200014bc 	.word	0x200014bc

08006f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <xTaskGetSchedulerState+0x34>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	e008      	b.n	8006f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <xTaskGetSchedulerState+0x38>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	e001      	b.n	8006f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f76:	687b      	ldr	r3, [r7, #4]
	}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	200014a8 	.word	0x200014a8
 8006f88:	200014c4 	.word	0x200014c4

08006f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d056      	beq.n	8007050 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fa2:	4b2e      	ldr	r3, [pc, #184]	; (800705c <xTaskPriorityDisinherit+0xd0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d00a      	beq.n	8006fc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60bb      	str	r3, [r7, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d02c      	beq.n	8007050 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d128      	bne.n	8007050 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc70 	bl	80058e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <xTaskPriorityDisinherit+0xd4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d903      	bls.n	8007030 <xTaskPriorityDisinherit+0xa4>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <xTaskPriorityDisinherit+0xd4>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <xTaskPriorityDisinherit+0xd8>)
 800703e:	441a      	add	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe fbf1 	bl	800582e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007050:	697b      	ldr	r3, [r7, #20]
	}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000fc8 	.word	0x20000fc8
 8007060:	200014a4 	.word	0x200014a4
 8007064:	20000fcc 	.word	0x20000fcc

08007068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007072:	4b21      	ldr	r3, [pc, #132]	; (80070f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007078:	4b20      	ldr	r3, [pc, #128]	; (80070fc <prvAddCurrentTaskToDelayedList+0x94>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3304      	adds	r3, #4
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fc32 	bl	80058e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d10a      	bne.n	80070a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007092:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4819      	ldr	r0, [pc, #100]	; (8007100 <prvAddCurrentTaskToDelayedList+0x98>)
 800709c:	f7fe fbc7 	bl	800582e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070a0:	e026      	b.n	80070f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4413      	add	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070aa:	4b14      	ldr	r3, [pc, #80]	; (80070fc <prvAddCurrentTaskToDelayedList+0x94>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d209      	bcs.n	80070ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <prvAddCurrentTaskToDelayedList+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe fbd5 	bl	8005876 <vListInsert>
}
 80070cc:	e010      	b.n	80070f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ce:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <prvAddCurrentTaskToDelayedList+0x94>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f7fe fbcb 	bl	8005876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <prvAddCurrentTaskToDelayedList+0xa4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d202      	bcs.n	80070f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070ea:	4a08      	ldr	r2, [pc, #32]	; (800710c <prvAddCurrentTaskToDelayedList+0xa4>)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	200014a0 	.word	0x200014a0
 80070fc:	20000fc8 	.word	0x20000fc8
 8007100:	20001488 	.word	0x20001488
 8007104:	20001458 	.word	0x20001458
 8007108:	20001454 	.word	0x20001454
 800710c:	200014bc 	.word	0x200014bc

08007110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800711a:	f000 fb07 	bl	800772c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800711e:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <xTimerCreateTimerTask+0x80>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d021      	beq.n	800716a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800712e:	1d3a      	adds	r2, r7, #4
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fb31 	bl	80057a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	9202      	str	r2, [sp, #8]
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	2302      	movs	r3, #2
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	460a      	mov	r2, r1
 8007150:	4910      	ldr	r1, [pc, #64]	; (8007194 <xTimerCreateTimerTask+0x84>)
 8007152:	4811      	ldr	r0, [pc, #68]	; (8007198 <xTimerCreateTimerTask+0x88>)
 8007154:	f7ff f8de 	bl	8006314 <xTaskCreateStatic>
 8007158:	4603      	mov	r3, r0
 800715a:	4a10      	ldr	r2, [pc, #64]	; (800719c <xTimerCreateTimerTask+0x8c>)
 800715c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <xTimerCreateTimerTask+0x8c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	613b      	str	r3, [r7, #16]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007186:	697b      	ldr	r3, [r7, #20]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	200014f8 	.word	0x200014f8
 8007194:	080089ac 	.word	0x080089ac
 8007198:	080072d5 	.word	0x080072d5
 800719c:	200014fc 	.word	0x200014fc

080071a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	623b      	str	r3, [r7, #32]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <xTimerGenericCommand+0x98>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02a      	beq.n	800722c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b05      	cmp	r3, #5
 80071e6:	dc18      	bgt.n	800721a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071e8:	f7ff feb2 	bl	8006f50 <xTaskGetSchedulerState>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d109      	bne.n	8007206 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <xTimerGenericCommand+0x98>)
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f107 0110 	add.w	r1, r7, #16
 80071fa:	2300      	movs	r3, #0
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	f7fe fca1 	bl	8005b44 <xQueueGenericSend>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24
 8007204:	e012      	b.n	800722c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <xTimerGenericCommand+0x98>)
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f107 0110 	add.w	r1, r7, #16
 800720e:	2300      	movs	r3, #0
 8007210:	2200      	movs	r2, #0
 8007212:	f7fe fc97 	bl	8005b44 <xQueueGenericSend>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24
 8007218:	e008      	b.n	800722c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <xTimerGenericCommand+0x98>)
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	f107 0110 	add.w	r1, r7, #16
 8007222:	2300      	movs	r3, #0
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	f7fe fd8b 	bl	8005d40 <xQueueGenericSendFromISR>
 800722a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200014f8 	.word	0x200014f8

0800723c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007246:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <prvProcessExpiredTimer+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fb47 	bl	80058e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d022      	beq.n	80072ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	18d1      	adds	r1, r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6978      	ldr	r0, [r7, #20]
 8007276:	f000 f8d1 	bl	800741c <prvInsertTimerInActiveList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01f      	beq.n	80072c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	2100      	movs	r1, #0
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff88 	bl	80071a0 <xTimerGenericCommand>
 8007290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d113      	bne.n	80072c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60fb      	str	r3, [r7, #12]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	4798      	blx	r3
}
 80072c8:	bf00      	nop
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	200014f0 	.word	0x200014f0

080072d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f857 	bl	8007394 <prvGetNextExpireTime>
 80072e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4619      	mov	r1, r3
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f803 	bl	80072f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072f2:	f000 f8d5 	bl	80074a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072f6:	e7f1      	b.n	80072dc <prvTimerTask+0x8>

080072f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007302:	f7ff fa43 	bl	800678c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007306:	f107 0308 	add.w	r3, r7, #8
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f866 	bl	80073dc <prvSampleTimeNow>
 8007310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d130      	bne.n	800737a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <prvProcessTimerOrBlockTask+0x3c>
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	429a      	cmp	r2, r3
 8007324:	d806      	bhi.n	8007334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007326:	f7ff fa3f 	bl	80067a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff ff85 	bl	800723c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007332:	e024      	b.n	800737e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <prvProcessTimerOrBlockTask+0x90>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <prvProcessTimerOrBlockTask+0x50>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <prvProcessTimerOrBlockTask+0x52>
 8007348:	2300      	movs	r3, #0
 800734a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <prvProcessTimerOrBlockTask+0x94>)
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4619      	mov	r1, r3
 800735a:	f7fe ffa7 	bl	80062ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800735e:	f7ff fa23 	bl	80067a8 <xTaskResumeAll>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <prvProcessTimerOrBlockTask+0x98>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
}
 8007378:	e001      	b.n	800737e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800737a:	f7ff fa15 	bl	80067a8 <xTaskResumeAll>
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200014f4 	.word	0x200014f4
 800738c:	200014f8 	.word	0x200014f8
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <prvGetNextExpireTime+0x44>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <prvGetNextExpireTime+0x16>
 80073a6:	2201      	movs	r2, #1
 80073a8:	e000      	b.n	80073ac <prvGetNextExpireTime+0x18>
 80073aa:	2200      	movs	r2, #0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d105      	bne.n	80073c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <prvGetNextExpireTime+0x44>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	e001      	b.n	80073c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073c8:	68fb      	ldr	r3, [r7, #12]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	200014f0 	.word	0x200014f0

080073dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073e4:	f7ff fa7e 	bl	80068e4 <xTaskGetTickCount>
 80073e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <prvSampleTimeNow+0x3c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d205      	bcs.n	8007400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073f4:	f000 f936 	bl	8007664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007406:	4a04      	ldr	r2, [pc, #16]	; (8007418 <prvSampleTimeNow+0x3c>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800740c:	68fb      	ldr	r3, [r7, #12]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20001500 	.word	0x20001500

0800741c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d812      	bhi.n	8007468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	1ad2      	subs	r2, r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	d302      	bcc.n	8007456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007450:	2301      	movs	r3, #1
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e01b      	b.n	800748e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007456:	4b10      	ldr	r3, [pc, #64]	; (8007498 <prvInsertTimerInActiveList+0x7c>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7fe fa08 	bl	8005876 <vListInsert>
 8007466:	e012      	b.n	800748e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d206      	bcs.n	800747e <prvInsertTimerInActiveList+0x62>
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d302      	bcc.n	800747e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e007      	b.n	800748e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <prvInsertTimerInActiveList+0x80>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fe f9f4 	bl	8005876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800748e:	697b      	ldr	r3, [r7, #20]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200014f4 	.word	0x200014f4
 800749c:	200014f0 	.word	0x200014f0

080074a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08e      	sub	sp, #56	; 0x38
 80074a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074a6:	e0ca      	b.n	800763e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da18      	bge.n	80074e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	3304      	adds	r3, #4
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	61fb      	str	r3, [r7, #28]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d6:	6850      	ldr	r0, [r2, #4]
 80074d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074da:	6892      	ldr	r2, [r2, #8]
 80074dc:	4611      	mov	r1, r2
 80074de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f2c0 80aa 	blt.w	800763c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe f9f5 	bl	80058e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074fe:	463b      	mov	r3, r7
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff ff6b 	bl	80073dc <prvSampleTimeNow>
 8007506:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b09      	cmp	r3, #9
 800750c:	f200 8097 	bhi.w	800763e <prvProcessReceivedCommands+0x19e>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <prvProcessReceivedCommands+0x78>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007541 	.word	0x08007541
 800751c:	08007541 	.word	0x08007541
 8007520:	08007541 	.word	0x08007541
 8007524:	080075b5 	.word	0x080075b5
 8007528:	080075c9 	.word	0x080075c9
 800752c:	08007613 	.word	0x08007613
 8007530:	08007541 	.word	0x08007541
 8007534:	08007541 	.word	0x08007541
 8007538:	080075b5 	.word	0x080075b5
 800753c:	080075c9 	.word	0x080075c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	18d1      	adds	r1, r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007560:	f7ff ff5c 	bl	800741c <prvInsertTimerInActiveList>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d069      	beq.n	800763e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007570:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d05e      	beq.n	800763e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	441a      	add	r2, r3
 8007588:	2300      	movs	r3, #0
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2300      	movs	r3, #0
 800758e:	2100      	movs	r1, #0
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f7ff fe05 	bl	80071a0 <xTimerGenericCommand>
 8007596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d14f      	bne.n	800763e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	61bb      	str	r3, [r7, #24]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075c6:	e03a      	b.n	800763e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	617b      	str	r3, [r7, #20]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	18d1      	adds	r1, r2, r3
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760c:	f7ff ff06 	bl	800741c <prvInsertTimerInActiveList>
					break;
 8007610:	e015      	b.n	800763e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007622:	f000 fbdd 	bl	8007de0 <vPortFree>
 8007626:	e00a      	b.n	800763e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800763a:	e000      	b.n	800763e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800763c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800763e:	4b08      	ldr	r3, [pc, #32]	; (8007660 <prvProcessReceivedCommands+0x1c0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	1d39      	adds	r1, r7, #4
 8007644:	2200      	movs	r2, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fc16 	bl	8005e78 <xQueueReceive>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	f47f af2a 	bne.w	80074a8 <prvProcessReceivedCommands+0x8>
	}
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	3730      	adds	r7, #48	; 0x30
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	200014f8 	.word	0x200014f8

08007664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800766a:	e048      	b.n	80076fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800766c:	4b2d      	ldr	r3, [pc, #180]	; (8007724 <prvSwitchTimerLists+0xc0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007676:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <prvSwitchTimerLists+0xc0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3304      	adds	r3, #4
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe f92f 	bl	80058e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02e      	beq.n	80076fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d90e      	bls.n	80076d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076be:	4b19      	ldr	r3, [pc, #100]	; (8007724 <prvSwitchTimerLists+0xc0>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f7fe f8d4 	bl	8005876 <vListInsert>
 80076ce:	e016      	b.n	80076fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076d0:	2300      	movs	r3, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	2100      	movs	r1, #0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fd60 	bl	80071a0 <xTimerGenericCommand>
 80076e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	603b      	str	r3, [r7, #0]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <prvSwitchTimerLists+0xc0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1b1      	bne.n	800766c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <prvSwitchTimerLists+0xc0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <prvSwitchTimerLists+0xc4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a04      	ldr	r2, [pc, #16]	; (8007724 <prvSwitchTimerLists+0xc0>)
 8007714:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007716:	4a04      	ldr	r2, [pc, #16]	; (8007728 <prvSwitchTimerLists+0xc4>)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	6013      	str	r3, [r2, #0]
}
 800771c:	bf00      	nop
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200014f0 	.word	0x200014f0
 8007728:	200014f4 	.word	0x200014f4

0800772c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007732:	f000 f967 	bl	8007a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <prvCheckForValidListAndQueue+0x60>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d120      	bne.n	8007780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800773e:	4814      	ldr	r0, [pc, #80]	; (8007790 <prvCheckForValidListAndQueue+0x64>)
 8007740:	f7fe f848 	bl	80057d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007744:	4813      	ldr	r0, [pc, #76]	; (8007794 <prvCheckForValidListAndQueue+0x68>)
 8007746:	f7fe f845 	bl	80057d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <prvCheckForValidListAndQueue+0x6c>)
 800774c:	4a10      	ldr	r2, [pc, #64]	; (8007790 <prvCheckForValidListAndQueue+0x64>)
 800774e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <prvCheckForValidListAndQueue+0x70>)
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <prvCheckForValidListAndQueue+0x68>)
 8007754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <prvCheckForValidListAndQueue+0x74>)
 800775c:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <prvCheckForValidListAndQueue+0x78>)
 800775e:	2110      	movs	r1, #16
 8007760:	200a      	movs	r0, #10
 8007762:	f7fe f953 	bl	8005a0c <xQueueGenericCreateStatic>
 8007766:	4603      	mov	r3, r0
 8007768:	4a08      	ldr	r2, [pc, #32]	; (800778c <prvCheckForValidListAndQueue+0x60>)
 800776a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <prvCheckForValidListAndQueue+0x60>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <prvCheckForValidListAndQueue+0x60>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	490b      	ldr	r1, [pc, #44]	; (80077a8 <prvCheckForValidListAndQueue+0x7c>)
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fd6c 	bl	8006258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007780:	f000 f970 	bl	8007a64 <vPortExitCritical>
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200014f8 	.word	0x200014f8
 8007790:	200014c8 	.word	0x200014c8
 8007794:	200014dc 	.word	0x200014dc
 8007798:	200014f0 	.word	0x200014f0
 800779c:	200014f4 	.word	0x200014f4
 80077a0:	200015a4 	.word	0x200015a4
 80077a4:	20001504 	.word	0x20001504
 80077a8:	080089b4 	.word	0x080089b4

080077ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f023 0201 	bic.w	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3b04      	subs	r3, #4
 80077da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077dc:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <pxPortInitialiseStack+0x64>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b14      	subs	r3, #20
 80077e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3b04      	subs	r3, #4
 80077f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f06f 0202 	mvn.w	r2, #2
 80077fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3b20      	subs	r3, #32
 8007800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	08007815 	.word	0x08007815

08007814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <prvTaskExitError+0x54>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d00a      	beq.n	800783e <prvTaskExitError+0x2a>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <prvTaskExitError+0x28>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60bb      	str	r3, [r7, #8]
}
 8007850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007852:	bf00      	nop
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0fc      	beq.n	8007854 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	2000000c 	.word	0x2000000c
 800786c:	00000000 	.word	0x00000000

08007870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <pxCurrentTCBConst2>)
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	6808      	ldr	r0, [r1, #0]
 8007876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787a:	f380 8809 	msr	PSP, r0
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	4770      	bx	lr
 800788c:	f3af 8000 	nop.w

08007890 <pxCurrentTCBConst2>:
 8007890:	20000fc8 	.word	0x20000fc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop

08007898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007898:	4808      	ldr	r0, [pc, #32]	; (80078bc <prvPortStartFirstTask+0x24>)
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	6800      	ldr	r0, [r0, #0]
 800789e:	f380 8808 	msr	MSP, r0
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8814 	msr	CONTROL, r0
 80078aa:	b662      	cpsie	i
 80078ac:	b661      	cpsie	f
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	df00      	svc	0
 80078b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ba:	bf00      	nop
 80078bc:	e000ed08 	.word	0xe000ed08

080078c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078c6:	4b46      	ldr	r3, [pc, #280]	; (80079e0 <xPortStartScheduler+0x120>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a46      	ldr	r2, [pc, #280]	; (80079e4 <xPortStartScheduler+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10a      	bne.n	80078e6 <xPortStartScheduler+0x26>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	613b      	str	r3, [r7, #16]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078e6:	4b3e      	ldr	r3, [pc, #248]	; (80079e0 <xPortStartScheduler+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3f      	ldr	r2, [pc, #252]	; (80079e8 <xPortStartScheduler+0x128>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10a      	bne.n	8007906 <xPortStartScheduler+0x46>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60fb      	str	r3, [r7, #12]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007906:	4b39      	ldr	r3, [pc, #228]	; (80079ec <xPortStartScheduler+0x12c>)
 8007908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	22ff      	movs	r2, #255	; 0xff
 8007916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007928:	b2da      	uxtb	r2, r3
 800792a:	4b31      	ldr	r3, [pc, #196]	; (80079f0 <xPortStartScheduler+0x130>)
 800792c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800792e:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <xPortStartScheduler+0x134>)
 8007930:	2207      	movs	r2, #7
 8007932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007934:	e009      	b.n	800794a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007936:	4b2f      	ldr	r3, [pc, #188]	; (80079f4 <xPortStartScheduler+0x134>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3b01      	subs	r3, #1
 800793c:	4a2d      	ldr	r2, [pc, #180]	; (80079f4 <xPortStartScheduler+0x134>)
 800793e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d0ef      	beq.n	8007936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <xPortStartScheduler+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f1c3 0307 	rsb	r3, r3, #7
 800795e:	2b04      	cmp	r3, #4
 8007960:	d00a      	beq.n	8007978 <xPortStartScheduler+0xb8>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60bb      	str	r3, [r7, #8]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007978:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <xPortStartScheduler+0x134>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <xPortStartScheduler+0x134>)
 8007980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007982:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <xPortStartScheduler+0x134>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800798a:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <xPortStartScheduler+0x134>)
 800798c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <xPortStartScheduler+0x138>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <xPortStartScheduler+0x138>)
 800799c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <xPortStartScheduler+0x138>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a14      	ldr	r2, [pc, #80]	; (80079f8 <xPortStartScheduler+0x138>)
 80079a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079ae:	f000 f8dd 	bl	8007b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <xPortStartScheduler+0x13c>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079b8:	f000 f8fc 	bl	8007bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079bc:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <xPortStartScheduler+0x140>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <xPortStartScheduler+0x140>)
 80079c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079c8:	f7ff ff66 	bl	8007898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079cc:	f7ff f854 	bl	8006a78 <vTaskSwitchContext>
	prvTaskExitError();
 80079d0:	f7ff ff20 	bl	8007814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	e000ed00 	.word	0xe000ed00
 80079e4:	410fc271 	.word	0x410fc271
 80079e8:	410fc270 	.word	0x410fc270
 80079ec:	e000e400 	.word	0xe000e400
 80079f0:	200015f4 	.word	0x200015f4
 80079f4:	200015f8 	.word	0x200015f8
 80079f8:	e000ed20 	.word	0xe000ed20
 80079fc:	2000000c 	.word	0x2000000c
 8007a00:	e000ef34 	.word	0xe000ef34

08007a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	607b      	str	r3, [r7, #4]
}
 8007a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a1e:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <vPortEnterCritical+0x58>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <vPortEnterCritical+0x58>)
 8007a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <vPortEnterCritical+0x58>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d10f      	bne.n	8007a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <vPortEnterCritical+0x5c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	603b      	str	r3, [r7, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <vPortEnterCritical+0x4a>
	}
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	2000000c 	.word	0x2000000c
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <vPortExitCritical+0x50>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <vPortExitCritical+0x24>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	607b      	str	r3, [r7, #4]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <vPortExitCritical+0x50>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <vPortExitCritical+0x50>)
 8007a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <vPortExitCritical+0x50>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <vPortExitCritical+0x42>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	f383 8811 	msr	BASEPRI, r3
}
 8007aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	2000000c 	.word	0x2000000c
	...

08007ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ac0:	f3ef 8009 	mrs	r0, PSP
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <pxCurrentTCBConst>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	f01e 0f10 	tst.w	lr, #16
 8007ad0:	bf08      	it	eq
 8007ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	6010      	str	r0, [r2, #0]
 8007adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ae4:	f380 8811 	msr	BASEPRI, r0
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f7fe ffc2 	bl	8006a78 <vTaskSwitchContext>
 8007af4:	f04f 0000 	mov.w	r0, #0
 8007af8:	f380 8811 	msr	BASEPRI, r0
 8007afc:	bc09      	pop	{r0, r3}
 8007afe:	6819      	ldr	r1, [r3, #0]
 8007b00:	6808      	ldr	r0, [r1, #0]
 8007b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b06:	f01e 0f10 	tst.w	lr, #16
 8007b0a:	bf08      	it	eq
 8007b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b10:	f380 8809 	msr	PSP, r0
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w

08007b20 <pxCurrentTCBConst>:
 8007b20:	20000fc8 	.word	0x20000fc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b42:	f7fe fedf 	bl	8006904 <xTaskIncrementTick>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <xPortSysTickHandler+0x40>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f383 8811 	msr	BASEPRI, r3
}
 8007b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <vPortSetupTimerInterrupt+0x34>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <vPortSetupTimerInterrupt+0x38>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <vPortSetupTimerInterrupt+0x3c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <vPortSetupTimerInterrupt+0x40>)
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	099b      	lsrs	r3, r3, #6
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <vPortSetupTimerInterrupt+0x44>)
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b8e:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <vPortSetupTimerInterrupt+0x34>)
 8007b90:	2207      	movs	r2, #7
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	e000e010 	.word	0xe000e010
 8007ba4:	e000e018 	.word	0xe000e018
 8007ba8:	20000000 	.word	0x20000000
 8007bac:	10624dd3 	.word	0x10624dd3
 8007bb0:	e000e014 	.word	0xe000e014

08007bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bc4 <vPortEnableVFP+0x10>
 8007bb8:	6801      	ldr	r1, [r0, #0]
 8007bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bbe:	6001      	str	r1, [r0, #0]
 8007bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bc2:	bf00      	nop
 8007bc4:	e000ed88 	.word	0xe000ed88

08007bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bce:	f3ef 8305 	mrs	r3, IPSR
 8007bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d914      	bls.n	8007c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bda:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <vPortValidateInterruptPriority+0x70>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007be4:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <vPortValidateInterruptPriority+0x74>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	7afa      	ldrb	r2, [r7, #11]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d20a      	bcs.n	8007c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	607b      	str	r3, [r7, #4]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <vPortValidateInterruptPriority+0x78>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <vPortValidateInterruptPriority+0x7c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d90a      	bls.n	8007c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	603b      	str	r3, [r7, #0]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <vPortValidateInterruptPriority+0x60>
	}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	e000e3f0 	.word	0xe000e3f0
 8007c3c:	200015f4 	.word	0x200015f4
 8007c40:	e000ed0c 	.word	0xe000ed0c
 8007c44:	200015f8 	.word	0x200015f8

08007c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c54:	f7fe fd9a 	bl	800678c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c58:	4b5b      	ldr	r3, [pc, #364]	; (8007dc8 <pvPortMalloc+0x180>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c60:	f000 f920 	bl	8007ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c64:	4b59      	ldr	r3, [pc, #356]	; (8007dcc <pvPortMalloc+0x184>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 8093 	bne.w	8007d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01d      	beq.n	8007cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c78:	2208      	movs	r2, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f023 0307 	bic.w	r3, r3, #7
 8007c90:	3308      	adds	r3, #8
 8007c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	617b      	str	r3, [r7, #20]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d06e      	beq.n	8007d98 <pvPortMalloc+0x150>
 8007cba:	4b45      	ldr	r3, [pc, #276]	; (8007dd0 <pvPortMalloc+0x188>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d869      	bhi.n	8007d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cc4:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <pvPortMalloc+0x18c>)
 8007cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cc8:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <pvPortMalloc+0x18c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cce:	e004      	b.n	8007cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d903      	bls.n	8007cec <pvPortMalloc+0xa4>
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f1      	bne.n	8007cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cec:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <pvPortMalloc+0x180>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d050      	beq.n	8007d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	2308      	movs	r3, #8
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d91f      	bls.n	8007d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <pvPortMalloc+0xf8>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	613b      	str	r3, [r7, #16]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d52:	69b8      	ldr	r0, [r7, #24]
 8007d54:	f000 f908 	bl	8007f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d58:	4b1d      	ldr	r3, [pc, #116]	; (8007dd0 <pvPortMalloc+0x188>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <pvPortMalloc+0x188>)
 8007d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <pvPortMalloc+0x188>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <pvPortMalloc+0x190>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d203      	bcs.n	8007d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <pvPortMalloc+0x188>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <pvPortMalloc+0x190>)
 8007d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <pvPortMalloc+0x184>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <pvPortMalloc+0x194>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	4a11      	ldr	r2, [pc, #68]	; (8007ddc <pvPortMalloc+0x194>)
 8007d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d98:	f7fe fd06 	bl	80067a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <pvPortMalloc+0x174>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	60fb      	str	r3, [r7, #12]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <pvPortMalloc+0x172>
	return pvReturn;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3728      	adds	r7, #40	; 0x28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20005204 	.word	0x20005204
 8007dcc:	20005218 	.word	0x20005218
 8007dd0:	20005208 	.word	0x20005208
 8007dd4:	200051fc 	.word	0x200051fc
 8007dd8:	2000520c 	.word	0x2000520c
 8007ddc:	20005210 	.word	0x20005210

08007de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d04d      	beq.n	8007e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007df2:	2308      	movs	r3, #8
 8007df4:	425b      	negs	r3, r3
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	4413      	add	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <vPortFree+0xb8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <vPortFree+0x44>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	60fb      	str	r3, [r7, #12]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <vPortFree+0x62>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60bb      	str	r3, [r7, #8]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <vPortFree+0xb8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01e      	beq.n	8007e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11a      	bne.n	8007e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <vPortFree+0xb8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	43db      	mvns	r3, r3
 8007e62:	401a      	ands	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e68:	f7fe fc90 	bl	800678c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <vPortFree+0xbc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4413      	add	r3, r2
 8007e76:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <vPortFree+0xbc>)
 8007e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f000 f874 	bl	8007f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <vPortFree+0xc0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	4a06      	ldr	r2, [pc, #24]	; (8007ea0 <vPortFree+0xc0>)
 8007e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e8a:	f7fe fc8d 	bl	80067a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e8e:	bf00      	nop
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20005218 	.word	0x20005218
 8007e9c:	20005208 	.word	0x20005208
 8007ea0:	20005214 	.word	0x20005214

08007ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007eb0:	4b27      	ldr	r3, [pc, #156]	; (8007f50 <prvHeapInit+0xac>)
 8007eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00c      	beq.n	8007ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3307      	adds	r3, #7
 8007ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <prvHeapInit+0xac>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007edc:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <prvHeapInit+0xb0>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <prvHeapInit+0xb0>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0307 	bic.w	r3, r3, #7
 8007efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <prvHeapInit+0xb4>)
 8007f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <prvHeapInit+0xb4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <prvHeapInit+0xb4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f24:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <prvHeapInit+0xb4>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <prvHeapInit+0xb8>)
 8007f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <prvHeapInit+0xbc>)
 8007f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <prvHeapInit+0xc0>)
 8007f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f42:	601a      	str	r2, [r3, #0]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	200015fc 	.word	0x200015fc
 8007f54:	200051fc 	.word	0x200051fc
 8007f58:	20005204 	.word	0x20005204
 8007f5c:	2000520c 	.word	0x2000520c
 8007f60:	20005208 	.word	0x20005208
 8007f64:	20005218 	.word	0x20005218

08007f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <prvInsertBlockIntoFreeList+0xac>)
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e002      	b.n	8007f7c <prvInsertBlockIntoFreeList+0x14>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d8f7      	bhi.n	8007f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d108      	bne.n	8007faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	441a      	add	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	441a      	add	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d118      	bne.n	8007ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	4b15      	ldr	r3, [pc, #84]	; (8008018 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d00d      	beq.n	8007fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	e008      	b.n	8007ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e003      	b.n	8007ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d002      	beq.n	8008006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	200051fc 	.word	0x200051fc
 8008018:	20005204 	.word	0x20005204

0800801c <__errno>:
 800801c:	4b01      	ldr	r3, [pc, #4]	; (8008024 <__errno+0x8>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000010 	.word	0x20000010

08008028 <__libc_init_array>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4d0d      	ldr	r5, [pc, #52]	; (8008060 <__libc_init_array+0x38>)
 800802c:	4c0d      	ldr	r4, [pc, #52]	; (8008064 <__libc_init_array+0x3c>)
 800802e:	1b64      	subs	r4, r4, r5
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	2600      	movs	r6, #0
 8008034:	42a6      	cmp	r6, r4
 8008036:	d109      	bne.n	800804c <__libc_init_array+0x24>
 8008038:	4d0b      	ldr	r5, [pc, #44]	; (8008068 <__libc_init_array+0x40>)
 800803a:	4c0c      	ldr	r4, [pc, #48]	; (800806c <__libc_init_array+0x44>)
 800803c:	f000 fc8e 	bl	800895c <_init>
 8008040:	1b64      	subs	r4, r4, r5
 8008042:	10a4      	asrs	r4, r4, #2
 8008044:	2600      	movs	r6, #0
 8008046:	42a6      	cmp	r6, r4
 8008048:	d105      	bne.n	8008056 <__libc_init_array+0x2e>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008050:	4798      	blx	r3
 8008052:	3601      	adds	r6, #1
 8008054:	e7ee      	b.n	8008034 <__libc_init_array+0xc>
 8008056:	f855 3b04 	ldr.w	r3, [r5], #4
 800805a:	4798      	blx	r3
 800805c:	3601      	adds	r6, #1
 800805e:	e7f2      	b.n	8008046 <__libc_init_array+0x1e>
 8008060:	08008a58 	.word	0x08008a58
 8008064:	08008a58 	.word	0x08008a58
 8008068:	08008a58 	.word	0x08008a58
 800806c:	08008a5c 	.word	0x08008a5c

08008070 <memcpy>:
 8008070:	440a      	add	r2, r1
 8008072:	4291      	cmp	r1, r2
 8008074:	f100 33ff 	add.w	r3, r0, #4294967295
 8008078:	d100      	bne.n	800807c <memcpy+0xc>
 800807a:	4770      	bx	lr
 800807c:	b510      	push	{r4, lr}
 800807e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008086:	4291      	cmp	r1, r2
 8008088:	d1f9      	bne.n	800807e <memcpy+0xe>
 800808a:	bd10      	pop	{r4, pc}

0800808c <memset>:
 800808c:	4402      	add	r2, r0
 800808e:	4603      	mov	r3, r0
 8008090:	4293      	cmp	r3, r2
 8008092:	d100      	bne.n	8008096 <memset+0xa>
 8008094:	4770      	bx	lr
 8008096:	f803 1b01 	strb.w	r1, [r3], #1
 800809a:	e7f9      	b.n	8008090 <memset+0x4>

0800809c <siprintf>:
 800809c:	b40e      	push	{r1, r2, r3}
 800809e:	b500      	push	{lr}
 80080a0:	b09c      	sub	sp, #112	; 0x70
 80080a2:	ab1d      	add	r3, sp, #116	; 0x74
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	9006      	str	r0, [sp, #24]
 80080a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080ac:	4809      	ldr	r0, [pc, #36]	; (80080d4 <siprintf+0x38>)
 80080ae:	9107      	str	r1, [sp, #28]
 80080b0:	9104      	str	r1, [sp, #16]
 80080b2:	4909      	ldr	r1, [pc, #36]	; (80080d8 <siprintf+0x3c>)
 80080b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b8:	9105      	str	r1, [sp, #20]
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	a902      	add	r1, sp, #8
 80080c0:	f000 f868 	bl	8008194 <_svfiprintf_r>
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	b01c      	add	sp, #112	; 0x70
 80080cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d0:	b003      	add	sp, #12
 80080d2:	4770      	bx	lr
 80080d4:	20000010 	.word	0x20000010
 80080d8:	ffff0208 	.word	0xffff0208

080080dc <__ssputs_r>:
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	688e      	ldr	r6, [r1, #8]
 80080e2:	429e      	cmp	r6, r3
 80080e4:	4682      	mov	sl, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	4690      	mov	r8, r2
 80080ea:	461f      	mov	r7, r3
 80080ec:	d838      	bhi.n	8008160 <__ssputs_r+0x84>
 80080ee:	898a      	ldrh	r2, [r1, #12]
 80080f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080f4:	d032      	beq.n	800815c <__ssputs_r+0x80>
 80080f6:	6825      	ldr	r5, [r4, #0]
 80080f8:	6909      	ldr	r1, [r1, #16]
 80080fa:	eba5 0901 	sub.w	r9, r5, r1
 80080fe:	6965      	ldr	r5, [r4, #20]
 8008100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008108:	3301      	adds	r3, #1
 800810a:	444b      	add	r3, r9
 800810c:	106d      	asrs	r5, r5, #1
 800810e:	429d      	cmp	r5, r3
 8008110:	bf38      	it	cc
 8008112:	461d      	movcc	r5, r3
 8008114:	0553      	lsls	r3, r2, #21
 8008116:	d531      	bpl.n	800817c <__ssputs_r+0xa0>
 8008118:	4629      	mov	r1, r5
 800811a:	f000 fb55 	bl	80087c8 <_malloc_r>
 800811e:	4606      	mov	r6, r0
 8008120:	b950      	cbnz	r0, 8008138 <__ssputs_r+0x5c>
 8008122:	230c      	movs	r3, #12
 8008124:	f8ca 3000 	str.w	r3, [sl]
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008138:	6921      	ldr	r1, [r4, #16]
 800813a:	464a      	mov	r2, r9
 800813c:	f7ff ff98 	bl	8008070 <memcpy>
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814a:	81a3      	strh	r3, [r4, #12]
 800814c:	6126      	str	r6, [r4, #16]
 800814e:	6165      	str	r5, [r4, #20]
 8008150:	444e      	add	r6, r9
 8008152:	eba5 0509 	sub.w	r5, r5, r9
 8008156:	6026      	str	r6, [r4, #0]
 8008158:	60a5      	str	r5, [r4, #8]
 800815a:	463e      	mov	r6, r7
 800815c:	42be      	cmp	r6, r7
 800815e:	d900      	bls.n	8008162 <__ssputs_r+0x86>
 8008160:	463e      	mov	r6, r7
 8008162:	6820      	ldr	r0, [r4, #0]
 8008164:	4632      	mov	r2, r6
 8008166:	4641      	mov	r1, r8
 8008168:	f000 faa8 	bl	80086bc <memmove>
 800816c:	68a3      	ldr	r3, [r4, #8]
 800816e:	1b9b      	subs	r3, r3, r6
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	4433      	add	r3, r6
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	2000      	movs	r0, #0
 800817a:	e7db      	b.n	8008134 <__ssputs_r+0x58>
 800817c:	462a      	mov	r2, r5
 800817e:	f000 fb97 	bl	80088b0 <_realloc_r>
 8008182:	4606      	mov	r6, r0
 8008184:	2800      	cmp	r0, #0
 8008186:	d1e1      	bne.n	800814c <__ssputs_r+0x70>
 8008188:	6921      	ldr	r1, [r4, #16]
 800818a:	4650      	mov	r0, sl
 800818c:	f000 fab0 	bl	80086f0 <_free_r>
 8008190:	e7c7      	b.n	8008122 <__ssputs_r+0x46>
	...

08008194 <_svfiprintf_r>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4698      	mov	r8, r3
 800819a:	898b      	ldrh	r3, [r1, #12]
 800819c:	061b      	lsls	r3, r3, #24
 800819e:	b09d      	sub	sp, #116	; 0x74
 80081a0:	4607      	mov	r7, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	d50e      	bpl.n	80081c6 <_svfiprintf_r+0x32>
 80081a8:	690b      	ldr	r3, [r1, #16]
 80081aa:	b963      	cbnz	r3, 80081c6 <_svfiprintf_r+0x32>
 80081ac:	2140      	movs	r1, #64	; 0x40
 80081ae:	f000 fb0b 	bl	80087c8 <_malloc_r>
 80081b2:	6028      	str	r0, [r5, #0]
 80081b4:	6128      	str	r0, [r5, #16]
 80081b6:	b920      	cbnz	r0, 80081c2 <_svfiprintf_r+0x2e>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	e0d1      	b.n	8008366 <_svfiprintf_r+0x1d2>
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	616b      	str	r3, [r5, #20]
 80081c6:	2300      	movs	r3, #0
 80081c8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ca:	2320      	movs	r3, #32
 80081cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d4:	2330      	movs	r3, #48	; 0x30
 80081d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008380 <_svfiprintf_r+0x1ec>
 80081da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081de:	f04f 0901 	mov.w	r9, #1
 80081e2:	4623      	mov	r3, r4
 80081e4:	469a      	mov	sl, r3
 80081e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ea:	b10a      	cbz	r2, 80081f0 <_svfiprintf_r+0x5c>
 80081ec:	2a25      	cmp	r2, #37	; 0x25
 80081ee:	d1f9      	bne.n	80081e4 <_svfiprintf_r+0x50>
 80081f0:	ebba 0b04 	subs.w	fp, sl, r4
 80081f4:	d00b      	beq.n	800820e <_svfiprintf_r+0x7a>
 80081f6:	465b      	mov	r3, fp
 80081f8:	4622      	mov	r2, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff ff6d 	bl	80080dc <__ssputs_r>
 8008202:	3001      	adds	r0, #1
 8008204:	f000 80aa 	beq.w	800835c <_svfiprintf_r+0x1c8>
 8008208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800820a:	445a      	add	r2, fp
 800820c:	9209      	str	r2, [sp, #36]	; 0x24
 800820e:	f89a 3000 	ldrb.w	r3, [sl]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80a2 	beq.w	800835c <_svfiprintf_r+0x1c8>
 8008218:	2300      	movs	r3, #0
 800821a:	f04f 32ff 	mov.w	r2, #4294967295
 800821e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008222:	f10a 0a01 	add.w	sl, sl, #1
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	9307      	str	r3, [sp, #28]
 800822a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800822e:	931a      	str	r3, [sp, #104]	; 0x68
 8008230:	4654      	mov	r4, sl
 8008232:	2205      	movs	r2, #5
 8008234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008238:	4851      	ldr	r0, [pc, #324]	; (8008380 <_svfiprintf_r+0x1ec>)
 800823a:	f7f7 ffd9 	bl	80001f0 <memchr>
 800823e:	9a04      	ldr	r2, [sp, #16]
 8008240:	b9d8      	cbnz	r0, 800827a <_svfiprintf_r+0xe6>
 8008242:	06d0      	lsls	r0, r2, #27
 8008244:	bf44      	itt	mi
 8008246:	2320      	movmi	r3, #32
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	0711      	lsls	r1, r2, #28
 800824e:	bf44      	itt	mi
 8008250:	232b      	movmi	r3, #43	; 0x2b
 8008252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008256:	f89a 3000 	ldrb.w	r3, [sl]
 800825a:	2b2a      	cmp	r3, #42	; 0x2a
 800825c:	d015      	beq.n	800828a <_svfiprintf_r+0xf6>
 800825e:	9a07      	ldr	r2, [sp, #28]
 8008260:	4654      	mov	r4, sl
 8008262:	2000      	movs	r0, #0
 8008264:	f04f 0c0a 	mov.w	ip, #10
 8008268:	4621      	mov	r1, r4
 800826a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826e:	3b30      	subs	r3, #48	; 0x30
 8008270:	2b09      	cmp	r3, #9
 8008272:	d94e      	bls.n	8008312 <_svfiprintf_r+0x17e>
 8008274:	b1b0      	cbz	r0, 80082a4 <_svfiprintf_r+0x110>
 8008276:	9207      	str	r2, [sp, #28]
 8008278:	e014      	b.n	80082a4 <_svfiprintf_r+0x110>
 800827a:	eba0 0308 	sub.w	r3, r0, r8
 800827e:	fa09 f303 	lsl.w	r3, r9, r3
 8008282:	4313      	orrs	r3, r2
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	46a2      	mov	sl, r4
 8008288:	e7d2      	b.n	8008230 <_svfiprintf_r+0x9c>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	1d19      	adds	r1, r3, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9103      	str	r1, [sp, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbb      	ittet	lt
 8008296:	425b      	neglt	r3, r3
 8008298:	f042 0202 	orrlt.w	r2, r2, #2
 800829c:	9307      	strge	r3, [sp, #28]
 800829e:	9307      	strlt	r3, [sp, #28]
 80082a0:	bfb8      	it	lt
 80082a2:	9204      	strlt	r2, [sp, #16]
 80082a4:	7823      	ldrb	r3, [r4, #0]
 80082a6:	2b2e      	cmp	r3, #46	; 0x2e
 80082a8:	d10c      	bne.n	80082c4 <_svfiprintf_r+0x130>
 80082aa:	7863      	ldrb	r3, [r4, #1]
 80082ac:	2b2a      	cmp	r3, #42	; 0x2a
 80082ae:	d135      	bne.n	800831c <_svfiprintf_r+0x188>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	1d1a      	adds	r2, r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	9203      	str	r2, [sp, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfb8      	it	lt
 80082bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80082c0:	3402      	adds	r4, #2
 80082c2:	9305      	str	r3, [sp, #20]
 80082c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008390 <_svfiprintf_r+0x1fc>
 80082c8:	7821      	ldrb	r1, [r4, #0]
 80082ca:	2203      	movs	r2, #3
 80082cc:	4650      	mov	r0, sl
 80082ce:	f7f7 ff8f 	bl	80001f0 <memchr>
 80082d2:	b140      	cbz	r0, 80082e6 <_svfiprintf_r+0x152>
 80082d4:	2340      	movs	r3, #64	; 0x40
 80082d6:	eba0 000a 	sub.w	r0, r0, sl
 80082da:	fa03 f000 	lsl.w	r0, r3, r0
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	4303      	orrs	r3, r0
 80082e2:	3401      	adds	r4, #1
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4826      	ldr	r0, [pc, #152]	; (8008384 <_svfiprintf_r+0x1f0>)
 80082ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082f0:	2206      	movs	r2, #6
 80082f2:	f7f7 ff7d 	bl	80001f0 <memchr>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d038      	beq.n	800836c <_svfiprintf_r+0x1d8>
 80082fa:	4b23      	ldr	r3, [pc, #140]	; (8008388 <_svfiprintf_r+0x1f4>)
 80082fc:	bb1b      	cbnz	r3, 8008346 <_svfiprintf_r+0x1b2>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	3307      	adds	r3, #7
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	3308      	adds	r3, #8
 8008308:	9303      	str	r3, [sp, #12]
 800830a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830c:	4433      	add	r3, r6
 800830e:	9309      	str	r3, [sp, #36]	; 0x24
 8008310:	e767      	b.n	80081e2 <_svfiprintf_r+0x4e>
 8008312:	fb0c 3202 	mla	r2, ip, r2, r3
 8008316:	460c      	mov	r4, r1
 8008318:	2001      	movs	r0, #1
 800831a:	e7a5      	b.n	8008268 <_svfiprintf_r+0xd4>
 800831c:	2300      	movs	r3, #0
 800831e:	3401      	adds	r4, #1
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	4619      	mov	r1, r3
 8008324:	f04f 0c0a 	mov.w	ip, #10
 8008328:	4620      	mov	r0, r4
 800832a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800832e:	3a30      	subs	r2, #48	; 0x30
 8008330:	2a09      	cmp	r2, #9
 8008332:	d903      	bls.n	800833c <_svfiprintf_r+0x1a8>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0c5      	beq.n	80082c4 <_svfiprintf_r+0x130>
 8008338:	9105      	str	r1, [sp, #20]
 800833a:	e7c3      	b.n	80082c4 <_svfiprintf_r+0x130>
 800833c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008340:	4604      	mov	r4, r0
 8008342:	2301      	movs	r3, #1
 8008344:	e7f0      	b.n	8008328 <_svfiprintf_r+0x194>
 8008346:	ab03      	add	r3, sp, #12
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	462a      	mov	r2, r5
 800834c:	4b0f      	ldr	r3, [pc, #60]	; (800838c <_svfiprintf_r+0x1f8>)
 800834e:	a904      	add	r1, sp, #16
 8008350:	4638      	mov	r0, r7
 8008352:	f3af 8000 	nop.w
 8008356:	1c42      	adds	r2, r0, #1
 8008358:	4606      	mov	r6, r0
 800835a:	d1d6      	bne.n	800830a <_svfiprintf_r+0x176>
 800835c:	89ab      	ldrh	r3, [r5, #12]
 800835e:	065b      	lsls	r3, r3, #25
 8008360:	f53f af2c 	bmi.w	80081bc <_svfiprintf_r+0x28>
 8008364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008366:	b01d      	add	sp, #116	; 0x74
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <_svfiprintf_r+0x1f8>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4638      	mov	r0, r7
 8008378:	f000 f87a 	bl	8008470 <_printf_i>
 800837c:	e7eb      	b.n	8008356 <_svfiprintf_r+0x1c2>
 800837e:	bf00      	nop
 8008380:	08008a1c 	.word	0x08008a1c
 8008384:	08008a26 	.word	0x08008a26
 8008388:	00000000 	.word	0x00000000
 800838c:	080080dd 	.word	0x080080dd
 8008390:	08008a22 	.word	0x08008a22

08008394 <_printf_common>:
 8008394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	4616      	mov	r6, r2
 800839a:	4699      	mov	r9, r3
 800839c:	688a      	ldr	r2, [r1, #8]
 800839e:	690b      	ldr	r3, [r1, #16]
 80083a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	bfb8      	it	lt
 80083a8:	4613      	movlt	r3, r2
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083b0:	4607      	mov	r7, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b10a      	cbz	r2, 80083ba <_printf_common+0x26>
 80083b6:	3301      	adds	r3, #1
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	0699      	lsls	r1, r3, #26
 80083be:	bf42      	ittt	mi
 80083c0:	6833      	ldrmi	r3, [r6, #0]
 80083c2:	3302      	addmi	r3, #2
 80083c4:	6033      	strmi	r3, [r6, #0]
 80083c6:	6825      	ldr	r5, [r4, #0]
 80083c8:	f015 0506 	ands.w	r5, r5, #6
 80083cc:	d106      	bne.n	80083dc <_printf_common+0x48>
 80083ce:	f104 0a19 	add.w	sl, r4, #25
 80083d2:	68e3      	ldr	r3, [r4, #12]
 80083d4:	6832      	ldr	r2, [r6, #0]
 80083d6:	1a9b      	subs	r3, r3, r2
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dc26      	bgt.n	800842a <_printf_common+0x96>
 80083dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083e0:	1e13      	subs	r3, r2, #0
 80083e2:	6822      	ldr	r2, [r4, #0]
 80083e4:	bf18      	it	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	0692      	lsls	r2, r2, #26
 80083ea:	d42b      	bmi.n	8008444 <_printf_common+0xb0>
 80083ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083f0:	4649      	mov	r1, r9
 80083f2:	4638      	mov	r0, r7
 80083f4:	47c0      	blx	r8
 80083f6:	3001      	adds	r0, #1
 80083f8:	d01e      	beq.n	8008438 <_printf_common+0xa4>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	68e5      	ldr	r5, [r4, #12]
 80083fe:	6832      	ldr	r2, [r6, #0]
 8008400:	f003 0306 	and.w	r3, r3, #6
 8008404:	2b04      	cmp	r3, #4
 8008406:	bf08      	it	eq
 8008408:	1aad      	subeq	r5, r5, r2
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	bf0c      	ite	eq
 8008410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008414:	2500      	movne	r5, #0
 8008416:	4293      	cmp	r3, r2
 8008418:	bfc4      	itt	gt
 800841a:	1a9b      	subgt	r3, r3, r2
 800841c:	18ed      	addgt	r5, r5, r3
 800841e:	2600      	movs	r6, #0
 8008420:	341a      	adds	r4, #26
 8008422:	42b5      	cmp	r5, r6
 8008424:	d11a      	bne.n	800845c <_printf_common+0xc8>
 8008426:	2000      	movs	r0, #0
 8008428:	e008      	b.n	800843c <_printf_common+0xa8>
 800842a:	2301      	movs	r3, #1
 800842c:	4652      	mov	r2, sl
 800842e:	4649      	mov	r1, r9
 8008430:	4638      	mov	r0, r7
 8008432:	47c0      	blx	r8
 8008434:	3001      	adds	r0, #1
 8008436:	d103      	bne.n	8008440 <_printf_common+0xac>
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	3501      	adds	r5, #1
 8008442:	e7c6      	b.n	80083d2 <_printf_common+0x3e>
 8008444:	18e1      	adds	r1, r4, r3
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	2030      	movs	r0, #48	; 0x30
 800844a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800844e:	4422      	add	r2, r4
 8008450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008458:	3302      	adds	r3, #2
 800845a:	e7c7      	b.n	80083ec <_printf_common+0x58>
 800845c:	2301      	movs	r3, #1
 800845e:	4622      	mov	r2, r4
 8008460:	4649      	mov	r1, r9
 8008462:	4638      	mov	r0, r7
 8008464:	47c0      	blx	r8
 8008466:	3001      	adds	r0, #1
 8008468:	d0e6      	beq.n	8008438 <_printf_common+0xa4>
 800846a:	3601      	adds	r6, #1
 800846c:	e7d9      	b.n	8008422 <_printf_common+0x8e>
	...

08008470 <_printf_i>:
 8008470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	7e0f      	ldrb	r7, [r1, #24]
 8008476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008478:	2f78      	cmp	r7, #120	; 0x78
 800847a:	4691      	mov	r9, r2
 800847c:	4680      	mov	r8, r0
 800847e:	460c      	mov	r4, r1
 8008480:	469a      	mov	sl, r3
 8008482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008486:	d807      	bhi.n	8008498 <_printf_i+0x28>
 8008488:	2f62      	cmp	r7, #98	; 0x62
 800848a:	d80a      	bhi.n	80084a2 <_printf_i+0x32>
 800848c:	2f00      	cmp	r7, #0
 800848e:	f000 80d8 	beq.w	8008642 <_printf_i+0x1d2>
 8008492:	2f58      	cmp	r7, #88	; 0x58
 8008494:	f000 80a3 	beq.w	80085de <_printf_i+0x16e>
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084a0:	e03a      	b.n	8008518 <_printf_i+0xa8>
 80084a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084a6:	2b15      	cmp	r3, #21
 80084a8:	d8f6      	bhi.n	8008498 <_printf_i+0x28>
 80084aa:	a101      	add	r1, pc, #4	; (adr r1, 80084b0 <_printf_i+0x40>)
 80084ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084b0:	08008509 	.word	0x08008509
 80084b4:	0800851d 	.word	0x0800851d
 80084b8:	08008499 	.word	0x08008499
 80084bc:	08008499 	.word	0x08008499
 80084c0:	08008499 	.word	0x08008499
 80084c4:	08008499 	.word	0x08008499
 80084c8:	0800851d 	.word	0x0800851d
 80084cc:	08008499 	.word	0x08008499
 80084d0:	08008499 	.word	0x08008499
 80084d4:	08008499 	.word	0x08008499
 80084d8:	08008499 	.word	0x08008499
 80084dc:	08008629 	.word	0x08008629
 80084e0:	0800854d 	.word	0x0800854d
 80084e4:	0800860b 	.word	0x0800860b
 80084e8:	08008499 	.word	0x08008499
 80084ec:	08008499 	.word	0x08008499
 80084f0:	0800864b 	.word	0x0800864b
 80084f4:	08008499 	.word	0x08008499
 80084f8:	0800854d 	.word	0x0800854d
 80084fc:	08008499 	.word	0x08008499
 8008500:	08008499 	.word	0x08008499
 8008504:	08008613 	.word	0x08008613
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	1d1a      	adds	r2, r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	602a      	str	r2, [r5, #0]
 8008510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008518:	2301      	movs	r3, #1
 800851a:	e0a3      	b.n	8008664 <_printf_i+0x1f4>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	6829      	ldr	r1, [r5, #0]
 8008520:	0606      	lsls	r6, r0, #24
 8008522:	f101 0304 	add.w	r3, r1, #4
 8008526:	d50a      	bpl.n	800853e <_printf_i+0xce>
 8008528:	680e      	ldr	r6, [r1, #0]
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	2e00      	cmp	r6, #0
 800852e:	da03      	bge.n	8008538 <_printf_i+0xc8>
 8008530:	232d      	movs	r3, #45	; 0x2d
 8008532:	4276      	negs	r6, r6
 8008534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008538:	485e      	ldr	r0, [pc, #376]	; (80086b4 <_printf_i+0x244>)
 800853a:	230a      	movs	r3, #10
 800853c:	e019      	b.n	8008572 <_printf_i+0x102>
 800853e:	680e      	ldr	r6, [r1, #0]
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008546:	bf18      	it	ne
 8008548:	b236      	sxthne	r6, r6
 800854a:	e7ef      	b.n	800852c <_printf_i+0xbc>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	6820      	ldr	r0, [r4, #0]
 8008550:	1d19      	adds	r1, r3, #4
 8008552:	6029      	str	r1, [r5, #0]
 8008554:	0601      	lsls	r1, r0, #24
 8008556:	d501      	bpl.n	800855c <_printf_i+0xec>
 8008558:	681e      	ldr	r6, [r3, #0]
 800855a:	e002      	b.n	8008562 <_printf_i+0xf2>
 800855c:	0646      	lsls	r6, r0, #25
 800855e:	d5fb      	bpl.n	8008558 <_printf_i+0xe8>
 8008560:	881e      	ldrh	r6, [r3, #0]
 8008562:	4854      	ldr	r0, [pc, #336]	; (80086b4 <_printf_i+0x244>)
 8008564:	2f6f      	cmp	r7, #111	; 0x6f
 8008566:	bf0c      	ite	eq
 8008568:	2308      	moveq	r3, #8
 800856a:	230a      	movne	r3, #10
 800856c:	2100      	movs	r1, #0
 800856e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008572:	6865      	ldr	r5, [r4, #4]
 8008574:	60a5      	str	r5, [r4, #8]
 8008576:	2d00      	cmp	r5, #0
 8008578:	bfa2      	ittt	ge
 800857a:	6821      	ldrge	r1, [r4, #0]
 800857c:	f021 0104 	bicge.w	r1, r1, #4
 8008580:	6021      	strge	r1, [r4, #0]
 8008582:	b90e      	cbnz	r6, 8008588 <_printf_i+0x118>
 8008584:	2d00      	cmp	r5, #0
 8008586:	d04d      	beq.n	8008624 <_printf_i+0x1b4>
 8008588:	4615      	mov	r5, r2
 800858a:	fbb6 f1f3 	udiv	r1, r6, r3
 800858e:	fb03 6711 	mls	r7, r3, r1, r6
 8008592:	5dc7      	ldrb	r7, [r0, r7]
 8008594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008598:	4637      	mov	r7, r6
 800859a:	42bb      	cmp	r3, r7
 800859c:	460e      	mov	r6, r1
 800859e:	d9f4      	bls.n	800858a <_printf_i+0x11a>
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d10b      	bne.n	80085bc <_printf_i+0x14c>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	07de      	lsls	r6, r3, #31
 80085a8:	d508      	bpl.n	80085bc <_printf_i+0x14c>
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	6861      	ldr	r1, [r4, #4]
 80085ae:	4299      	cmp	r1, r3
 80085b0:	bfde      	ittt	le
 80085b2:	2330      	movle	r3, #48	; 0x30
 80085b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085bc:	1b52      	subs	r2, r2, r5
 80085be:	6122      	str	r2, [r4, #16]
 80085c0:	f8cd a000 	str.w	sl, [sp]
 80085c4:	464b      	mov	r3, r9
 80085c6:	aa03      	add	r2, sp, #12
 80085c8:	4621      	mov	r1, r4
 80085ca:	4640      	mov	r0, r8
 80085cc:	f7ff fee2 	bl	8008394 <_printf_common>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d14c      	bne.n	800866e <_printf_i+0x1fe>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b004      	add	sp, #16
 80085da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085de:	4835      	ldr	r0, [pc, #212]	; (80086b4 <_printf_i+0x244>)
 80085e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085e4:	6829      	ldr	r1, [r5, #0]
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085ec:	6029      	str	r1, [r5, #0]
 80085ee:	061d      	lsls	r5, r3, #24
 80085f0:	d514      	bpl.n	800861c <_printf_i+0x1ac>
 80085f2:	07df      	lsls	r7, r3, #31
 80085f4:	bf44      	itt	mi
 80085f6:	f043 0320 	orrmi.w	r3, r3, #32
 80085fa:	6023      	strmi	r3, [r4, #0]
 80085fc:	b91e      	cbnz	r6, 8008606 <_printf_i+0x196>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f023 0320 	bic.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	2310      	movs	r3, #16
 8008608:	e7b0      	b.n	800856c <_printf_i+0xfc>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f043 0320 	orr.w	r3, r3, #32
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	2378      	movs	r3, #120	; 0x78
 8008614:	4828      	ldr	r0, [pc, #160]	; (80086b8 <_printf_i+0x248>)
 8008616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800861a:	e7e3      	b.n	80085e4 <_printf_i+0x174>
 800861c:	0659      	lsls	r1, r3, #25
 800861e:	bf48      	it	mi
 8008620:	b2b6      	uxthmi	r6, r6
 8008622:	e7e6      	b.n	80085f2 <_printf_i+0x182>
 8008624:	4615      	mov	r5, r2
 8008626:	e7bb      	b.n	80085a0 <_printf_i+0x130>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	6826      	ldr	r6, [r4, #0]
 800862c:	6961      	ldr	r1, [r4, #20]
 800862e:	1d18      	adds	r0, r3, #4
 8008630:	6028      	str	r0, [r5, #0]
 8008632:	0635      	lsls	r5, r6, #24
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	d501      	bpl.n	800863c <_printf_i+0x1cc>
 8008638:	6019      	str	r1, [r3, #0]
 800863a:	e002      	b.n	8008642 <_printf_i+0x1d2>
 800863c:	0670      	lsls	r0, r6, #25
 800863e:	d5fb      	bpl.n	8008638 <_printf_i+0x1c8>
 8008640:	8019      	strh	r1, [r3, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	4615      	mov	r5, r2
 8008648:	e7ba      	b.n	80085c0 <_printf_i+0x150>
 800864a:	682b      	ldr	r3, [r5, #0]
 800864c:	1d1a      	adds	r2, r3, #4
 800864e:	602a      	str	r2, [r5, #0]
 8008650:	681d      	ldr	r5, [r3, #0]
 8008652:	6862      	ldr	r2, [r4, #4]
 8008654:	2100      	movs	r1, #0
 8008656:	4628      	mov	r0, r5
 8008658:	f7f7 fdca 	bl	80001f0 <memchr>
 800865c:	b108      	cbz	r0, 8008662 <_printf_i+0x1f2>
 800865e:	1b40      	subs	r0, r0, r5
 8008660:	6060      	str	r0, [r4, #4]
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	2300      	movs	r3, #0
 8008668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800866c:	e7a8      	b.n	80085c0 <_printf_i+0x150>
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	462a      	mov	r2, r5
 8008672:	4649      	mov	r1, r9
 8008674:	4640      	mov	r0, r8
 8008676:	47d0      	blx	sl
 8008678:	3001      	adds	r0, #1
 800867a:	d0ab      	beq.n	80085d4 <_printf_i+0x164>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	079b      	lsls	r3, r3, #30
 8008680:	d413      	bmi.n	80086aa <_printf_i+0x23a>
 8008682:	68e0      	ldr	r0, [r4, #12]
 8008684:	9b03      	ldr	r3, [sp, #12]
 8008686:	4298      	cmp	r0, r3
 8008688:	bfb8      	it	lt
 800868a:	4618      	movlt	r0, r3
 800868c:	e7a4      	b.n	80085d8 <_printf_i+0x168>
 800868e:	2301      	movs	r3, #1
 8008690:	4632      	mov	r2, r6
 8008692:	4649      	mov	r1, r9
 8008694:	4640      	mov	r0, r8
 8008696:	47d0      	blx	sl
 8008698:	3001      	adds	r0, #1
 800869a:	d09b      	beq.n	80085d4 <_printf_i+0x164>
 800869c:	3501      	adds	r5, #1
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	9903      	ldr	r1, [sp, #12]
 80086a2:	1a5b      	subs	r3, r3, r1
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dcf2      	bgt.n	800868e <_printf_i+0x21e>
 80086a8:	e7eb      	b.n	8008682 <_printf_i+0x212>
 80086aa:	2500      	movs	r5, #0
 80086ac:	f104 0619 	add.w	r6, r4, #25
 80086b0:	e7f5      	b.n	800869e <_printf_i+0x22e>
 80086b2:	bf00      	nop
 80086b4:	08008a2d 	.word	0x08008a2d
 80086b8:	08008a3e 	.word	0x08008a3e

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4402      	add	r2, r0
 80086de:	4601      	mov	r1, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <_free_r>:
 80086f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086f2:	2900      	cmp	r1, #0
 80086f4:	d044      	beq.n	8008780 <_free_r+0x90>
 80086f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fa:	9001      	str	r0, [sp, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008702:	bfb8      	it	lt
 8008704:	18e4      	addlt	r4, r4, r3
 8008706:	f000 f913 	bl	8008930 <__malloc_lock>
 800870a:	4a1e      	ldr	r2, [pc, #120]	; (8008784 <_free_r+0x94>)
 800870c:	9801      	ldr	r0, [sp, #4]
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	b933      	cbnz	r3, 8008720 <_free_r+0x30>
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	6014      	str	r4, [r2, #0]
 8008716:	b003      	add	sp, #12
 8008718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800871c:	f000 b90e 	b.w	800893c <__malloc_unlock>
 8008720:	42a3      	cmp	r3, r4
 8008722:	d908      	bls.n	8008736 <_free_r+0x46>
 8008724:	6825      	ldr	r5, [r4, #0]
 8008726:	1961      	adds	r1, r4, r5
 8008728:	428b      	cmp	r3, r1
 800872a:	bf01      	itttt	eq
 800872c:	6819      	ldreq	r1, [r3, #0]
 800872e:	685b      	ldreq	r3, [r3, #4]
 8008730:	1949      	addeq	r1, r1, r5
 8008732:	6021      	streq	r1, [r4, #0]
 8008734:	e7ed      	b.n	8008712 <_free_r+0x22>
 8008736:	461a      	mov	r2, r3
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	b10b      	cbz	r3, 8008740 <_free_r+0x50>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d9fa      	bls.n	8008736 <_free_r+0x46>
 8008740:	6811      	ldr	r1, [r2, #0]
 8008742:	1855      	adds	r5, r2, r1
 8008744:	42a5      	cmp	r5, r4
 8008746:	d10b      	bne.n	8008760 <_free_r+0x70>
 8008748:	6824      	ldr	r4, [r4, #0]
 800874a:	4421      	add	r1, r4
 800874c:	1854      	adds	r4, r2, r1
 800874e:	42a3      	cmp	r3, r4
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	d1e0      	bne.n	8008716 <_free_r+0x26>
 8008754:	681c      	ldr	r4, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	6053      	str	r3, [r2, #4]
 800875a:	4421      	add	r1, r4
 800875c:	6011      	str	r1, [r2, #0]
 800875e:	e7da      	b.n	8008716 <_free_r+0x26>
 8008760:	d902      	bls.n	8008768 <_free_r+0x78>
 8008762:	230c      	movs	r3, #12
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	e7d6      	b.n	8008716 <_free_r+0x26>
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	1961      	adds	r1, r4, r5
 800876c:	428b      	cmp	r3, r1
 800876e:	bf04      	itt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	bf04      	itt	eq
 8008778:	1949      	addeq	r1, r1, r5
 800877a:	6021      	streq	r1, [r4, #0]
 800877c:	6054      	str	r4, [r2, #4]
 800877e:	e7ca      	b.n	8008716 <_free_r+0x26>
 8008780:	b003      	add	sp, #12
 8008782:	bd30      	pop	{r4, r5, pc}
 8008784:	2000521c 	.word	0x2000521c

08008788 <sbrk_aligned>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4e0e      	ldr	r6, [pc, #56]	; (80087c4 <sbrk_aligned+0x3c>)
 800878c:	460c      	mov	r4, r1
 800878e:	6831      	ldr	r1, [r6, #0]
 8008790:	4605      	mov	r5, r0
 8008792:	b911      	cbnz	r1, 800879a <sbrk_aligned+0x12>
 8008794:	f000 f8bc 	bl	8008910 <_sbrk_r>
 8008798:	6030      	str	r0, [r6, #0]
 800879a:	4621      	mov	r1, r4
 800879c:	4628      	mov	r0, r5
 800879e:	f000 f8b7 	bl	8008910 <_sbrk_r>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d00a      	beq.n	80087bc <sbrk_aligned+0x34>
 80087a6:	1cc4      	adds	r4, r0, #3
 80087a8:	f024 0403 	bic.w	r4, r4, #3
 80087ac:	42a0      	cmp	r0, r4
 80087ae:	d007      	beq.n	80087c0 <sbrk_aligned+0x38>
 80087b0:	1a21      	subs	r1, r4, r0
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f8ac 	bl	8008910 <_sbrk_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d101      	bne.n	80087c0 <sbrk_aligned+0x38>
 80087bc:	f04f 34ff 	mov.w	r4, #4294967295
 80087c0:	4620      	mov	r0, r4
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	20005220 	.word	0x20005220

080087c8 <_malloc_r>:
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	1ccd      	adds	r5, r1, #3
 80087ce:	f025 0503 	bic.w	r5, r5, #3
 80087d2:	3508      	adds	r5, #8
 80087d4:	2d0c      	cmp	r5, #12
 80087d6:	bf38      	it	cc
 80087d8:	250c      	movcc	r5, #12
 80087da:	2d00      	cmp	r5, #0
 80087dc:	4607      	mov	r7, r0
 80087de:	db01      	blt.n	80087e4 <_malloc_r+0x1c>
 80087e0:	42a9      	cmp	r1, r5
 80087e2:	d905      	bls.n	80087f0 <_malloc_r+0x28>
 80087e4:	230c      	movs	r3, #12
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	2600      	movs	r6, #0
 80087ea:	4630      	mov	r0, r6
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	4e2e      	ldr	r6, [pc, #184]	; (80088ac <_malloc_r+0xe4>)
 80087f2:	f000 f89d 	bl	8008930 <__malloc_lock>
 80087f6:	6833      	ldr	r3, [r6, #0]
 80087f8:	461c      	mov	r4, r3
 80087fa:	bb34      	cbnz	r4, 800884a <_malloc_r+0x82>
 80087fc:	4629      	mov	r1, r5
 80087fe:	4638      	mov	r0, r7
 8008800:	f7ff ffc2 	bl	8008788 <sbrk_aligned>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	4604      	mov	r4, r0
 8008808:	d14d      	bne.n	80088a6 <_malloc_r+0xde>
 800880a:	6834      	ldr	r4, [r6, #0]
 800880c:	4626      	mov	r6, r4
 800880e:	2e00      	cmp	r6, #0
 8008810:	d140      	bne.n	8008894 <_malloc_r+0xcc>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	4631      	mov	r1, r6
 8008816:	4638      	mov	r0, r7
 8008818:	eb04 0803 	add.w	r8, r4, r3
 800881c:	f000 f878 	bl	8008910 <_sbrk_r>
 8008820:	4580      	cmp	r8, r0
 8008822:	d13a      	bne.n	800889a <_malloc_r+0xd2>
 8008824:	6821      	ldr	r1, [r4, #0]
 8008826:	3503      	adds	r5, #3
 8008828:	1a6d      	subs	r5, r5, r1
 800882a:	f025 0503 	bic.w	r5, r5, #3
 800882e:	3508      	adds	r5, #8
 8008830:	2d0c      	cmp	r5, #12
 8008832:	bf38      	it	cc
 8008834:	250c      	movcc	r5, #12
 8008836:	4629      	mov	r1, r5
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ffa5 	bl	8008788 <sbrk_aligned>
 800883e:	3001      	adds	r0, #1
 8008840:	d02b      	beq.n	800889a <_malloc_r+0xd2>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	442b      	add	r3, r5
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	e00e      	b.n	8008868 <_malloc_r+0xa0>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	1b52      	subs	r2, r2, r5
 800884e:	d41e      	bmi.n	800888e <_malloc_r+0xc6>
 8008850:	2a0b      	cmp	r2, #11
 8008852:	d916      	bls.n	8008882 <_malloc_r+0xba>
 8008854:	1961      	adds	r1, r4, r5
 8008856:	42a3      	cmp	r3, r4
 8008858:	6025      	str	r5, [r4, #0]
 800885a:	bf18      	it	ne
 800885c:	6059      	strne	r1, [r3, #4]
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	bf08      	it	eq
 8008862:	6031      	streq	r1, [r6, #0]
 8008864:	5162      	str	r2, [r4, r5]
 8008866:	604b      	str	r3, [r1, #4]
 8008868:	4638      	mov	r0, r7
 800886a:	f104 060b 	add.w	r6, r4, #11
 800886e:	f000 f865 	bl	800893c <__malloc_unlock>
 8008872:	f026 0607 	bic.w	r6, r6, #7
 8008876:	1d23      	adds	r3, r4, #4
 8008878:	1af2      	subs	r2, r6, r3
 800887a:	d0b6      	beq.n	80087ea <_malloc_r+0x22>
 800887c:	1b9b      	subs	r3, r3, r6
 800887e:	50a3      	str	r3, [r4, r2]
 8008880:	e7b3      	b.n	80087ea <_malloc_r+0x22>
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	42a3      	cmp	r3, r4
 8008886:	bf0c      	ite	eq
 8008888:	6032      	streq	r2, [r6, #0]
 800888a:	605a      	strne	r2, [r3, #4]
 800888c:	e7ec      	b.n	8008868 <_malloc_r+0xa0>
 800888e:	4623      	mov	r3, r4
 8008890:	6864      	ldr	r4, [r4, #4]
 8008892:	e7b2      	b.n	80087fa <_malloc_r+0x32>
 8008894:	4634      	mov	r4, r6
 8008896:	6876      	ldr	r6, [r6, #4]
 8008898:	e7b9      	b.n	800880e <_malloc_r+0x46>
 800889a:	230c      	movs	r3, #12
 800889c:	603b      	str	r3, [r7, #0]
 800889e:	4638      	mov	r0, r7
 80088a0:	f000 f84c 	bl	800893c <__malloc_unlock>
 80088a4:	e7a1      	b.n	80087ea <_malloc_r+0x22>
 80088a6:	6025      	str	r5, [r4, #0]
 80088a8:	e7de      	b.n	8008868 <_malloc_r+0xa0>
 80088aa:	bf00      	nop
 80088ac:	2000521c 	.word	0x2000521c

080088b0 <_realloc_r>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	4680      	mov	r8, r0
 80088b6:	4614      	mov	r4, r2
 80088b8:	460e      	mov	r6, r1
 80088ba:	b921      	cbnz	r1, 80088c6 <_realloc_r+0x16>
 80088bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	4611      	mov	r1, r2
 80088c2:	f7ff bf81 	b.w	80087c8 <_malloc_r>
 80088c6:	b92a      	cbnz	r2, 80088d4 <_realloc_r+0x24>
 80088c8:	f7ff ff12 	bl	80086f0 <_free_r>
 80088cc:	4625      	mov	r5, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	f000 f838 	bl	8008948 <_malloc_usable_size_r>
 80088d8:	4284      	cmp	r4, r0
 80088da:	4607      	mov	r7, r0
 80088dc:	d802      	bhi.n	80088e4 <_realloc_r+0x34>
 80088de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088e2:	d812      	bhi.n	800890a <_realloc_r+0x5a>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7ff ff6e 	bl	80087c8 <_malloc_r>
 80088ec:	4605      	mov	r5, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d0ed      	beq.n	80088ce <_realloc_r+0x1e>
 80088f2:	42bc      	cmp	r4, r7
 80088f4:	4622      	mov	r2, r4
 80088f6:	4631      	mov	r1, r6
 80088f8:	bf28      	it	cs
 80088fa:	463a      	movcs	r2, r7
 80088fc:	f7ff fbb8 	bl	8008070 <memcpy>
 8008900:	4631      	mov	r1, r6
 8008902:	4640      	mov	r0, r8
 8008904:	f7ff fef4 	bl	80086f0 <_free_r>
 8008908:	e7e1      	b.n	80088ce <_realloc_r+0x1e>
 800890a:	4635      	mov	r5, r6
 800890c:	e7df      	b.n	80088ce <_realloc_r+0x1e>
	...

08008910 <_sbrk_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d06      	ldr	r5, [pc, #24]	; (800892c <_sbrk_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7f9 fc02 	bl	8002124 <_sbrk>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_sbrk_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_sbrk_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20005224 	.word	0x20005224

08008930 <__malloc_lock>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__malloc_lock+0x8>)
 8008932:	f000 b811 	b.w	8008958 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	20005228 	.word	0x20005228

0800893c <__malloc_unlock>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__malloc_unlock+0x8>)
 800893e:	f000 b80c 	b.w	800895a <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	20005228 	.word	0x20005228

08008948 <_malloc_usable_size_r>:
 8008948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894c:	1f18      	subs	r0, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfbc      	itt	lt
 8008952:	580b      	ldrlt	r3, [r1, r0]
 8008954:	18c0      	addlt	r0, r0, r3
 8008956:	4770      	bx	lr

08008958 <__retarget_lock_acquire_recursive>:
 8008958:	4770      	bx	lr

0800895a <__retarget_lock_release_recursive>:
 800895a:	4770      	bx	lr

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
